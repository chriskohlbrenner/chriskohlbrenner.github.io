<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: POODR | CEK.io]]></title>
  <link href="http://cek.io/blog/categories/poodr/atom.xml" rel="self"/>
  <link href="http://cek.io/"/>
  <updated>2017-08-17T18:15:12-04:00</updated>
  <id>http://cek.io/</id>
  <author>
    <name><![CDATA[Chris Eaves-Kohlbrenner]]></name>
    <email><![CDATA[c.kohlbrenner@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on Cost-Effective Testing (POODR: Chapter 9)]]></title>
    <link href="http://cek.io/blog/2014/06/10/poodr-ch-9/"/>
    <updated>2014-06-10T10:17:18-04:00</updated>
    <id>http://cek.io/blog/2014/06/10/poodr-ch-9</id>
    <content type="html"><![CDATA[<p><strong>I am working my way through programming-related reading, currently with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<hr />

<br>


<p>I&rsquo;ve written about testing <a href="http://cek.io/blog/categories/testing/">previously</a>, but Sandi Metz, in the last chapter of POODR, lends some valuable insights to testing, specifically about writing <strong>cost-effective</strong> tests with an emphasis on <strong>changeable code</strong>. In this post, I simply reference some of her comments on testing that I found most helpful.</p>

<h3>Why Test?</h3>


<p>Metz starts by describing, &ldquo;Writing changeable code is an art whose practice relies on three different skills&rdquo; (191). These three skills, as she sees them, are:</p>

<ul>
<li>Understanding object-oriented design</li>
<li>Refactoring code</li>
<li>Writing high-value tests</li>
</ul>


<!--more-->




<h3>What if the tests are costly themselves?</h3>


<p>&ldquo;The true purpose of testing, just like the true purpose of design, is to reduce costs. If writing, maintaining, and running tests consumes more time than would otherwise be needed to fix bugs, write documentation, and design applications tests are clearly not worth writing and no rational person would argue otherwise&rdquo; (192).</p>

<p>&ldquo;The solution to the problem of costly tests, however, is not to stop testing but instead to get better at it. Getting good value from tests requires clarity of intention and knowing what, when, and how to test&rdquo; (192).</p>

<h3>Benefits of Testing</h3>


<ul>
<li><u>Finding Bugs [and finding them early]</u> &ndash; &ldquo;Fixing bugs early always lowers costs&rdquo; (193).</li>
<li><u>Supplying Documentation</u> &ndash; &ldquo;Tests provide the only reliable documentation of design&hellip;long after paper documents become obsolete and human memory fails&rdquo; (193).</li>
<li><u>Deferring Design Decisions</u> &ndash; &ldquo;Tests allow you to safely defer design decisions&hellip;when you are aware of just one concrete case in the present but you fully expect new cases to arrive in the near future&rdquo; (193).</li>
<li><u>Supporting Abstractions</u> &ndash; &ldquo;There is a level of design abstraction where it is almost impossible to safely make any change unless the code has tests&rdquo; (194).</li>
<li><u>Exposing Design Flaws</u> &ndash; &ldquo;Tests are the canary in the coal mine; when the design is bad, testing is hard&rdquo; (194).</li>
</ul>


<h3>Know what to test</h3>


<p>&ldquo;Most programmers write too many tests&hellip;The safest way to [write fewer tests] is to test everything just once and in the proper place&rdquo; (194).</p>

<h3>Know when to test</h3>


<p>&ldquo;You should write tests first, whenever it makes sense to do so&hellip;Be warned, however, that writing tests first is no substitute for and does not guarantee a well-designed application&rdquo; (197).</p>

<h3>Know how to test</h3>


<p>&ldquo;There are many good reasons to stay within the testing mainstream [with frameworks like MiniTest and RSpec]&hellip;Both [TDD and BDD] are completely acceptable. Each has costs and benefits&rdquo; (199).</p>

<h3>In conclusion</h3>


<p><blockquote><p>Tests are indispensable. Well-designed applications are highly abstract and under constant pressure to evolve; without tests these applications can neither be understood nor safely changed. The best tests are loosely coupled to the underlying code and test everything once and in the proper place. They add value without increasing costs.</p></p><p><p>A well-designed application with a carefully crafted test suite is a joy to behold and a pleasure to extend. It can adapt to every new circumstance and meet any unexpected need.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (240)</strong></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Cheerful, Detached, and Merciless': Composition and Code Arrangement in Ruby (POODR: Chapter 8)]]></title>
    <link href="http://cek.io/blog/2014/05/27/poodr-ch-8/"/>
    <updated>2014-05-27T09:57:39-04:00</updated>
    <id>http://cek.io/blog/2014/05/27/poodr-ch-8</id>
    <content type="html"><![CDATA[<p><strong>I am working my way through programming-related reading, currently with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<hr />

<br>


<p>Sandi Metz describes object-oriented composition&mdash;the combining of simple, independent objects into larger, more complex wholes, in which the larger object is connected to its parts via a &lsquo;has-a&rsquo; relationship&mdash;and code arrangement in Ruby more generally:</p>

<p><blockquote><p>Composition allows you to combine small parts to create more complex objects such that the <strong>whole becomes more than the sum of its parts</strong>. Composed objects tend to consist of simple, discrete entities that can easily be rearranged into new combinations. These simple objects are easy to understand, reuse, and test, but because they combine into a more complicated whole, the operation of the bigger application may not be as easy to understand as that of the individual parts.</p></p><p><p>Composition, <a href="http://cek.io/blog/2014/05/06/poodr-ch-6/">classical inheritance</a>, and <a href="http://cek.io/blog/2014/05/26/poodr-ch-7/">behavior sharing via modules</a> are competing techniques for arranging code. Each has different costs and benefits; these differences predispose them to be better at solving slightly different problems.</p></p><p><p>These techniques are tools, nothing more, and <strong>you’ll become a better designer if you practice each of them</strong>. Learning to use them properly is a matter of experience and judgment, and one of the best ways to gain experience is to learn from your own mistakes. <strong>The key to improving your design skills is to attempt these techniques, accept your errors cheerfully, remain detached from past design decisions, and refactor mercilessly</strong>.</p></p><p><p>As you gain experience, you’ll get better at choosing the correct technique the first time, your costs will go down, and your applications will improve.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (190)</strong></footer></blockquote></p>

<p>Cheerful, detached, and merciless. New descriptors of a <a href="http://threevirtues.com/">virtuous programmer</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roles, Modules, and Mix-Ins in Ruby (POODR: Chapter 7)]]></title>
    <link href="http://cek.io/blog/2014/05/26/poodr-ch-7/"/>
    <updated>2014-05-26T11:52:50-04:00</updated>
    <id>http://cek.io/blog/2014/05/26/poodr-ch-7</id>
    <content type="html"><![CDATA[<p><strong>I am working my way through programming-related reading, currently with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<p><strong>Summary</strong>: When multiple objects play a common role, modules allow objects to share behavior. Ruby does not support multiple inheritance directly, but does so through mixins, or classes mixed with modules. The <a href="http://cek.io/blog/2014/05/26/poodr-ch-7#code">Memorial Day example below</a> illustrates modules and mixins.</p>

<hr />

<br>


<p>Remember the strategy of sharing behavior through classical inheritance, which I discussed in <a href="http://cek.io/blog/2014/05/06/poodr-ch-6/">this post</a>? It turns out there&rsquo;s a problem: inheritance cannot combine two existing subclasses. For that, we need to understand roles and modules.</p>

<h5>Quick test</h5>


<p>How many types of methods can an object respond to in Ruby? That is, in how many different ways can methods be implemented?</p>

<h5>Answer (read on)</h5>


<!--more-->


<p>Four. An object can respond to the following messages:</p>

<ol>
<li>Those it implements.</li>
<li>Those implemented in all objects above it in the hierarchy.</li>
<li>Those implemented in any module that has been added to it.</li>
<li>Those implemented in all modules added to any object above it in the hierarchy.</li>
</ol>


<p>Modules add two of the four kinds of messages that objects can respond to in Ruby. Kind of a big deal. They enable objects to share roles.</p>

<h3>Roles</h3>


<p><blockquote><p>Some problems require <strong>sharing behavior among otherwise unrelated objects</strong>. This common behavior is orthogonal to class; it’s <strong>a role an object plays</strong>. [&hellip;] When formerly unrelated objects begin to play a common role, they enter into a relationship with the objects for whom they play the role. These relationships are not as visible as those created by the subclass/superclass requirements of classical inheritance but they exist nonetheless.</p></blockquote></p>

<p>Furthermore, Metz writes:
<blockquote><p>When a role needs shared behavior you’re faced with <strong>the problem of organizing the shared code</strong>. [&hellip;] Many object-oriented languages provide a way to define a named group of methods that are independent of class and can be mixed in to any object. <strong>In Ruby, these mix-ins are called modules</strong>. Methods can be defined in a module and then the module can be added to any object. Modules thus provide a perfect way to <strong>allow objects of different classes to play a common role using a single set of code.</strong>&ldquo;</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (142-143)</strong></footer></blockquote></p>

<h3>Inheritable Code</h3>


<p>The whole point of modules is to enable us to write good code. But Metz warns:
<blockquote><p>&hellip;you are equipped to write some truly frightening code. Imagine the possibilities. You can write modules that include other modules. You can write modules that override the methods defined in other modules. You can create deeply nested class inheritance hierarchies and then include these various modules at different levels of the hierarchy. You can write code that is impossible to understand, debug, or extend.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (158)</strong></footer></blockquote></p>

<p>She follows this warning, however, by saying &ldquo;this very same power is what allows you to create simple structures of related objects
that elegantly fulfill the needs of your application, your task is not to avoid these
techniques but to learn to use them for the right reasons, in the right places, in the
correct way.&rdquo; The first step in this direction, Metz argues, is to write properly inheritable code.</p>

<p>A few practical object-oriented design tips for writing and maintaining inheritance hierarchies and modules:</p>

<ul>
  <li>
      <strong>"Recognize the Antipatterns"</strong>: if using variables like <code>type</code> or <code>category</code>, look to classical inheritance. If checking the class of receiving objects to determine which message to send, duck typing.
  </li>
  <li>
      <strong>"Insist on the Abstraction"</strong>: all code in an abstract superclass should apply to every class that inherits it.
  </li>
  <li>
      <strong>"Honor the Contract"</strong>: subclasses agree to a contract, promising to be substitutable for their superclasses. Maintain that substitutability.
  </li>
  <li>
      <strong>"Use the Template Method Pattern"</strong>: separate the abstract from the concrete.
  </li>
  <li>
      <strong>"Preemptively Decouple Classes"</strong>: avoid writing code that requires its inheritors to send super; instead use hook messages.
  </li>
  <li>
      <strong>"Create Shallow Hierarchies"</strong>: The shallower and narrower, the better.
      <img class="center" src="/images/poodr/shallow-hierarchies.png">
  </li>
</ul>




<h3 id="code">Code Example</h3>


<p>Being Memorial Day and all, a simple example of modules and mix-ins, in which the <code>MemorialDay</code> class mixes in both the <code>May</code> and <code>Holiday</code> modules.</p>

<p>This code allows an instance of <code>MemorialDay</code> to call (1) methods that have been implemented in the <code>MemorialDay</code> class itself, (2) methods implemented in all objects above it in the hierarchy (in this case, <code>Object</code>), and (3) methods implemented in any module that has been added, namely <code>May</code> and <code>Holiday</code>.</p>

<p><strong>Note</strong>: there is a difference between <code>include</code> and <code>extend</code> when mixing in modules&mdash;<code>include</code> is for instance methods, <code>extend</code> for class methods.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (may.rb)</span> <a href='/downloads/code/modules-mixins-poodr/may.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">May</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mondays</span>
</span><span class='line'>    <span class="c1"># Array of all Mondays in May</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">26</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">month_of_year</span>
</span><span class='line'>        <span class="mi">5</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (holiday.rb)</span> <a href='/downloads/code/modules-mixins-poodr/holiday.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Holiday</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cause</span>
</span><span class='line'>        <span class="k">case</span> <span class="nb">name</span>
</span><span class='line'>        <span class="k">when</span> <span class="s2">&quot;Memorial Day&quot;</span>
</span><span class='line'>            <span class="s2">&quot;remembering the men and women who died while serving in the country&#39;s armed forces&quot;</span>
</span><span class='line'>        <span class="k">when</span> <span class="s2">&quot;Thanksgiving&quot;</span>
</span><span class='line'>            <span class="s2">&quot;giving thanks for the blessing of the harvest and of the preceding year&quot;</span>
</span><span class='line'>        <span class="c1"># ...</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (memorial_day.rb)</span> <a href='/downloads/code/modules-mixins-poodr/memorial_day.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MemorialDay</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">May</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Holiday</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>        <span class="s2">&quot;Memorial Day&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Memorial Day always occurs on the last Monday in May</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">day_of</span>
</span><span class='line'>      <span class="n">mondays</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">date</span>
</span><span class='line'>        <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">month_of_year</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">day_of</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="/images/poodr/memorial_day_irb.png"></p>

<p>Happy Memorial Day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Few Notes on Classical Inheritance in Ruby (POODR: Chapter 6)]]></title>
    <link href="http://cek.io/blog/2014/05/06/poodr-ch-6/"/>
    <updated>2014-05-06T09:55:11-04:00</updated>
    <id>http://cek.io/blog/2014/05/06/poodr-ch-6</id>
    <content type="html"><![CDATA[<p><strong>Having recently graduated from the Flatiron School, I am working my way through programming-related reading, beginning with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<hr />

<br>


<p>What&rsquo;s inheritance?</p>

<p><blockquote><p>The idea of inheritance may seem complicated but as with all complexity, there’s a simplifying abstraction. Inheritance is, at its core, a mechanism for automatic message delegation. It defines a forwarding path for not-understood messages. It creates relationships such that, if one object cannot respond to a received message, it delegates that message to another. You don’t have to write code to explicitly delegate the message, instead you define an inheritance relationship between two objects and the forwarding happens automatically.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  &ldquo;Practical Object-Oriented Design in Ruby (105)&rdquo;</strong></footer></blockquote></p>

<!--more-->


<p>That&rsquo;s it, that&rsquo;s all there is to inheritance. Not really. There&rsquo;s a lot to inheritance, and it&rsquo;s one of the things that makes Ruby the language that it is, in all its object-oriented glory.</p>

<p>In this post, I&rsquo;ll speed through a couple key lessons about <strong>classical</strong> inheritance. Some of it was old news, some of it brand new.</p>

<h3>Classical?</h3>


<p>Referring specifically to &ldquo;classical&rdquo; inheritance is simply to refer to &ldquo;class&rdquo;-based inheritance. This distinguishes it from other inheritance techniques (like modules in Ruby, prototypical inheritance in JavaScript, or any number of others). Classical inheritance deals with subclasses and superclasses (from which subclasses inherit).</p>

<h3>Single vs. Multiple Inheritance</h3>


<p>Multiple inheritance can get complicated (how do we know from which ancestor a descendant will inherit?). Metz explains that &ldquo;Many object-oriented languages [including Ruby] sidestep these complications by providing single inheritance, whereby a subclass is allowed only one parent superclass. Ruby does this; it has single inheritance. A superclass may have many subclasses, but each subclass is permitted only one superclass&rdquo; (112).</p>

<h3>Inherent Inheritance (inheritance and <code>nil?</code>)</h3>


<p>Whether you&rsquo;ve implemented a class hierarchy or not, if you&rsquo;ve used Ruby then you&rsquo;ve used inheritance. An example: <code>nil?</code>. Ruby contains two implementations of that method, one in <code>NilClass</code> and the other in <code>Object</code>. When <code>nil?</code> is called on an instance of <code>NilClass</code>, it returns <code>true</code>. On everything else, because everything elses is a subclass of <code>Object</code>, the <code>nil?</code> message travels up the superclass hierarchy to <code>Object</code>, which will then return <code>false</code>. See the image below for a depiction of this.</p>

<p><img class="center" src="/images/nil-inheritance.png"></p>

<h3>Creating a Hierarchy has Costs (to duplicate or inherit?)</h3>


<p>Any decision to implement inheritance should take into consideration the costs. Metz presents an example of a <code>MountainBike</code> and a <code>RoadBike</code> class, both of which could inherit from the <code>Bicycle</code> superclass. But she asks, &ldquo;Even though you now have a requirement for two kinds of bikes, this still may not be the right moment to commit to inheritance&rdquo; and continues &ldquo;A decision to proceed with the hierarchy accepts the risk that you may not yet have enough information to identify the correct abstraction. Your choice about whether to wait or to proceed hinges on how soon you expect a third bike to appear versus how much you expect the duplication to cost&rdquo; (118-119).</p>

<h3>"Push-everything-down-and-then-pull-some-things-up strategy"</h3>


<p>That&rsquo;s a technical term, I think. It&rsquo;s a direct quote, anyway. Metz describes that, in implementing inheritance, it is important to push certain things down to the subclass, then pull them back up to the superclass to be inherited (and vice versa), even though it means moving code around multiple times. Her reasoning? Every programmer needs to ask themself: &ldquo;What will happen when I’m wrong?&rdquo;. Metz argues that &ldquo;Every decision you make includes two costs: one to implement it and another to change it when you discover that you were wrong. Taking both costs into account when choosing among alternatives motivates you to make conservative choices that minimize the cost of change&rdquo; (123).</p>

<h3><code>Super</code> keywords</h3>


<p>&ldquo;Sending <code>super</code> in any method passes that message up the superclass chain&rdquo; (115). This is essential for inheritance. Adding <code>super</code> to a method in a subclass will inherit the code of that same method of the subclass' parent. If you&rsquo;re confused, <a href="http://stackoverflow.com/questions/4632224/super-keyword-in-ruby">Stack Overflow&rsquo;s got you covered</a>.</p>

<!--more-->




<h3>Metz's code</h3>


<p>I&rsquo;ve copied Metz&rsquo;s final example of inheritance using <code>RoadBike</code>, <code>MountainBike</code>, and <code>Bicycle</code> classes. As you can see, many of the methods (<code>initialize</code>, <code>spares</code>, different <code>default</code>s, etc.) are shared by the superclass, but some are unique to the subclasses.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (bicycle_inheritance.rb)</span> <a href='/downloads/code/bicycle_inheritance.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Bicycle</span>
</span><span class='line'><span class="kp">attr_reader</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:chain</span><span class="p">,</span> <span class="ss">:tire_size</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:size</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@chain</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:chain</span><span class="o">]</span> <span class="o">||</span> <span class="n">default_chain</span>
</span><span class='line'>    <span class="vi">@tire_size</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:tire_size</span><span class="o">]</span> <span class="o">||</span> <span class="n">default_tire_size</span>
</span><span class='line'>    <span class="n">post_initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">spares</span>
</span><span class='line'>    <span class="p">{</span>  <span class="n">tire_size</span><span class="p">:</span> <span class="n">tire_size</span><span class="p">,</span>
</span><span class='line'>       <span class="ss">chain</span><span class="p">:</span> <span class="n">chain</span><span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">local_spares</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_tire_size</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">local_spares</span>
</span><span class='line'>    <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_chain</span>
</span><span class='line'>    <span class="s1">&#39;10-speed&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">RoadBike</span> <span class="o">&lt;</span> <span class="no">Bicycle</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:tape_color</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@tape_color</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:tape_color</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">local_spares</span>
</span><span class='line'>    <span class="p">{</span><span class="n">tape_color</span><span class="p">:</span> <span class="n">tape_color</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_tire_size</span>
</span><span class='line'>    <span class="s1">&#39;23&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MountainBike</span> <span class="o">&lt;</span> <span class="no">Bicycle</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:front_shock</span><span class="p">,</span> <span class="ss">:rear_shock</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@front_shock</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:front_shock</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@rear_shock</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:rear_shock</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">local_spares</span>
</span><span class='line'>    <span class="p">{</span><span class="n">rear_shock</span><span class="p">:</span> <span class="n">rear_shock</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_tire_size</span>
</span><span class='line'>    <span class="s1">&#39;2.1&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is a finished example, but Metz likes to go through what she calls &ldquo;antipatterns&rdquo;&mdash;common patterns that appear beneficial but are actually detrimental&mdash;to demonstrate a concept, so make sure to read <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">the full text</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphism and Duck Typing (POODR: Chapter 5)]]></title>
    <link href="http://cek.io/blog/2014/05/02/poodr-ch-5/"/>
    <updated>2014-05-02T09:42:24-04:00</updated>
    <id>http://cek.io/blog/2014/05/02/poodr-ch-5</id>
    <content type="html"><![CDATA[<p><strong>Having recently graduated from the Flatiron School, I am working my way through programming-related reading, beginning with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<p>My hope for this blog post is not to intimidate (as Sandi Metz suggests below), but to communicate the concepts of polymorphism and duck typing in Ruby, as Metz describes them in Chapter 5 of POODR.</p>

<p><blockquote><p>The term &lsquo;polymorphism&rsquo; is commonly used in object-oriented programming<br/>but its use in everyday speech is rare enough to warrant a definition. <strong>Polymorphism</strong> expresses a very specific concept and can be used,<br/>depending on your inclinations, either to <strong>communicate or to intimidate</strong>.<br/>Either way, it’s important to have a clear understanding of its meaning. First, a general definition: &lsquo;Morph&rsquo; is the Greek word for form, &lsquo;morphism&rsquo; is the state of having a form, and <strong>&lsquo;polymorphism&rsquo; is the state of having many forms</strong>. Biologists use this word. Darwin’s famous finches are polymorphic; a single species has many forms. [&hellip;] <strong>Polymorphism in OOP refers to the ability of many different objects to respond to the same message</strong>. Senders of the message need not care about the class of the receiver; receivers supply their own specific version of the behavior.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  &ldquo;Practical Object-Oriented Design in Ruby (95)&rdquo;</strong></footer></blockquote>
(Bolded emphases mine)</p>

<!--more-->


<p>A pretty simple definition for a somewhat complicated word. Polymorphism, the state of having many forms. Specifically, for our purposes in object-oriented programming, the ability of many different objects to respond to the same message. Let&rsquo;s flesh this out.</p>

<h3>An example: Metz's Bike Co. (i.e., what problems does duck typing solve?)</h3>


<p>Imagine a bicycle touring company looking to automate its process of booking trips. Each trip needs to be prepared by a mechanic (ensuring the bicycles are in working order), a trip coordinator (handling logistics, like food, for the trip), and a driver (ensuring the vehicle is ready to transport the trip participants). The code below (straight from POODR) is an example of how <u>not</u> to do this. But why?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (poodr_5_bad_example.rb)</span> <a href='/downloads/code/poodr_5_bad_example.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Trip</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:bicycles</span><span class="p">,</span> <span class="ss">:customers</span><span class="p">,</span> <span class="ss">:vehicle</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">preparers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">preparers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">preparer</span><span class="o">|</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">preparer</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">Mechanic</span>
</span><span class='line'>        <span class="n">preparer</span><span class="o">.</span><span class="n">prepare_bicycles</span><span class="p">(</span><span class="n">bicycles</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">TripCoordinator</span>
</span><span class='line'>        <span class="n">preparer</span><span class="o">.</span><span class="n">buy_food</span><span class="p">(</span><span class="n">customers</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">Driver</span>
</span><span class='line'>        <span class="n">preparer</span><span class="o">.</span><span class="n">gas_up</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
</span><span class='line'>        <span class="n">preparer</span><span class="o">.</span><span class="n">fill_water_tank</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mechanic</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepare_bicycles</span><span class="p">(</span><span class="n">bicycles</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bicycles</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">bicycle</span><span class="o">|</span> <span class="n">prepare_bicycle</span><span class="p">(</span><span class="n">bicycle</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepare_bicycle</span><span class="p">(</span><span class="n">bicycle</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TripCoordinator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">buy_food</span><span class="p">(</span><span class="n">customers</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Driver</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">gas_up</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fill_water_tank</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I&rsquo;ll let Metz explain what&rsquo;s wrong with this:</p>

<p><blockquote><p>Count the number of new dependencies in the prepare method. It relies on specific classes, no others will do. It relies on the explicit names of those classes. It knows the names of the messages that each class understands, along with the arguments that those messages require. All of this knowledge increases risk; many distant changes will now have side effects on this code.</p></p><p><p>To make matters worse, this style of code propagates itself. When another new trip preparer appears, you, or the next person down the programming line, will add a new when branch to the case statement. Your application will accrue more and more methods like this, where the method knows many class names and sends a specific message based on class. The logical endpoint of this programming style is a stiff and inflexible application, where it eventually becomes easier to rewrite everything than to change anything.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  &ldquo;Practical Object-Oriented Design in Ruby (90)&rdquo;</strong></footer></blockquote></p>

<p>A lot of negative consequences: class dependencies, risk of side effects for distant changes, propogation of this type of code, and ultimately a rigid application that requires a rewrite. This is where duck typing comes in. It can prevent all of those things.</p>

<h3>Solving these problems with duck typing (i.e., what is duck typing anyway?</h3>


<p>Duck typing is about defining objects by <strong>what they do</strong> instead of <strong>who they are</strong>. Think about Trip&rsquo;s <code>prepare</code> method&mdash;what does it do? Metz describes, &ldquo;the method serves a single purpose, its arguments arrive wishing to collaborate to accomplish a single goal. Every argument is here for the same reason and that reason is unrelated to the argument’s underlying class&rdquo; (90). It&rsquo;s not about the class of each argument, be it <code>Mechanic</code>, <code>TripCoordinator</code>, or <code>Driver</code>. If it walks like a duck and quacks like a duck, treat it like a duck (or, in this case, like a <code>Preparer</code>). Consider the example below:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (poodr_5_duck_type_example.rb)</span> <a href='/downloads/code/poodr_5_duck_type_example.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Trip</span>
</span><span class='line'><span class="kp">attr_reader</span> <span class="ss">:bicycles</span><span class="p">,</span> <span class="ss">:customers</span><span class="p">,</span> <span class="ss">:vehicle</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">preparers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">preparers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">preparer</span><span class="o">|</span>
</span><span class='line'>    <span class="n">preparer</span><span class="o">.</span><span class="n">prepare_trip</span><span class="p">(</span><span class="nb">self</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># when every preparer is a Duck that responds to ‘prepare_trip’</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Mechanic</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepare_trip</span><span class="p">(</span><span class="n">trip</span><span class="p">)</span>
</span><span class='line'>    <span class="n">trip</span><span class="o">.</span><span class="n">bicycles</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">bicycle</span><span class="o">|</span>
</span><span class='line'>    <span class="n">prepare_bicycle</span><span class="p">(</span><span class="n">bicycle</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TripCoordinator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepare_trip</span><span class="p">(</span><span class="n">trip</span><span class="p">)</span>
</span><span class='line'>    <span class="n">buy_food</span><span class="p">(</span><span class="n">trip</span><span class="o">.</span><span class="n">customers</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Driver</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepare_trip</span><span class="p">(</span><span class="n">trip</span><span class="p">)</span>
</span><span class='line'>    <span class="n">vehicle</span> <span class="o">=</span> <span class="n">trip</span><span class="o">.</span><span class="n">vehicle</span>
</span><span class='line'>    <span class="n">gas_up</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fill_water_tank</span><span class="p">(</span><span class="n">vehicle</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What&rsquo;s changed? <code>Trip</code>&rsquo;s <code>prepare</code> method and each other class' unique preparation methods (they&rsquo;ve all become <code>prepare_trip</code>). We&rsquo;ve effectively implemented a <code>Preparer</code> class, but it has no concrete existence; it exists only as a duck type. Now all objects that implement <code>prepare_trip</code> are <code>Preparers</code>.</p>

<p>Is this better? How? First of all, there&rsquo;s a certain symmetry and conciseness to it. We can all agree (or should, anyway) that&rsquo;s better. Second, though our first example was more concrete (and, thus, perhaps simpler to understand), we now have more extensible code. It&rsquo;s slightly more abstract, but changes to the code require us only to turn another object into a <code>Preparer</code>, rather than changing our original <code>prepare</code> method to include yet another class.</p>

<p>Understanding these tradeoffs can be difficult, and it boils down to a tension between concretion and abstraction. Metz explains that &ldquo;Concrete code is easy to understand but costly to extend. Abstract code may initially seem more obscure but, once understood, is far easier to change. Use of a duck type moves your code along the scale from more
concrete to more abstract, making the code easier to extend but casting a veil over the
underlying class of the duck&rdquo; (94).</p>

<h3>Recognizing Ducks</h3>


<p>This is all great, but how can we recognize ducks (and thus duck-type our objects) if it is, in fact, a difficult situation to recognize? Three common patterns can be replaced with ducks: (1) case statements that switch on class (this is what we saw in the original bad example), (2) <code>kind_of?</code> and <code>is_a?</code>, and (3) <code>responds_to?</code>. Each of these patterns deals with the object&rsquo;s behavior. If you find yourself using these patterns to check on an object&rsquo;s behavior, remember: if it behaves like a duck, treat it as such.</p>

<h3>Wrapping up</h3>


<p>Why did I introduce this post with a definition of polymorphism? Because duck typing is a reality of OOP <strong>only because</strong> OOP is polymorphic. Though duck typing is only one way to achieve polymorphism in Ruby (inheritance and behavior sharing with modules are others), it is a great example of it. Duck types leverage the ability of many Ruby objects to respond to the same message, which is the very definition of polymorphism.</p>
]]></content>
  </entry>
  
</feed>
