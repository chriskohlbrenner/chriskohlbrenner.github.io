<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reblog | CEK.io]]></title>
  <link href="http://cek.io/blog/categories/reblog/atom.xml" rel="self"/>
  <link href="http://cek.io/"/>
  <updated>2019-06-27T11:21:29+01:00</updated>
  <id>http://cek.io/</id>
  <author>
    <name><![CDATA[Chris Eaves-Kohlbrenner]]></name>
    <email><![CDATA[c.kohlbrenner@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Tender]]></title>
    <link href="http://cek.io/blog/2014/04/29/reblog-introducing-tender/"/>
    <updated>2014-04-29T14:46:48+01:00</updated>
    <id>http://cek.io/blog/2014/04/29/reblog-introducing-tender</id>
    <content type="html"><![CDATA[<p><strong>Note:</strong> This post is a reblog. It originally appeared on <a href="http://squarecraft.co/introducing-tender">Alex Patriquin&rsquo;s blog</a>.</p>

<!--more-->




<h1>Introducing Tender</a></h1>


<p>It&rsquo;s been a few weeks since I last posted, as I&rsquo;ve been Ã¼ber busy. In the final month of The Flatiron School, my fellow students and I were in an all-out sprint to build and launch our apps at the Science Fair, a kind of show-and-tell for our projects and the culmination of all our Ruby, Rails and Javascript training over the three month program.</p>

<p>The Science Fair was a resounding success and I&rsquo;m excited to share the first app that I worked on: Tender, a Venmo for Bitcoin. How&rsquo;s how my teammate and I made Tender.</p>

<p><img src="/images/tender-main.png"></p>

<h2>Tender</h2>


<p><a href="http://www.tendermessenger.com/">Tender</a> (<a href="https://github.com/alexpatriquin/BitcoinMessenger">Github</a>) is a social payments app (think Venmo) for Bitcoin. Users can send or receive any amount of Bitcoin, including extremely small amounts which can be used to validated the identity of counter-parties. Tender also comes with an inbox/outbox for messages.</p>

<p>I built Tender with my fellow Flatiron student <a href="https://twitter.com/CKohlbrenner">Chris Kohlbrenner</a>. I came up with the initial idea for the project as a Bitcoin dating site&hellip; hence the triple-play on words with the name &ldquo;Tender&rdquo;. However, we decided to generalize the app and make it usable (or at least instructive) for other open source projects as a general social messaging utility. </p><h3>Why Bitcoin Messaging?</h3><p>Bitcoin gets a lot of hype these days, but after working with the cryptocurrency a bit, I really do see its potential to transform online payments and <a target="_blank" data-cke-saved-href="http://blog.pmarca.com/2014/01/22/why-bitcoin-matters/" href="http://blog.pmarca.com/2014/01/22/why-bitcoin-matters/">much more</a>. For example, a messaging system can require a very small amount of Bitcoin get sent with each message as a way to prevent or at least deter bulk volume spammers. After practicing our web development skills, our main purpose in building Tender was to demonstrate this anti-spam concept.</p>

<p>We used Ruby on Rails as the framework and built the Bitcoin transactions features with the Coinbase API and the messaging functionality with a gem called Mailboxer. In the process of weaving those two features together, we learned a lot about them. Payments and messaging share the concept of &ldquo;credits&rdquo; and &ldquo;debits&rdquo; to a balance or mailbox. Kind of like double-ledger accounting, we had to do a credit and a debit whenever a user sent money and a message to another user, and vice-versa. You can see that code play out in the snippet below.</p>

<script src="https://gist.github.com/alexpatriquin/10937359.js"></script>




<h3>Coinbase and Typeahead.js</h3>


<p>To build Tender, we used Devise and Omniauth to authenticate users, enable them to sign in via Coinbase and to validate their balances on Coinbase. The app features a lot of validations and notices to users to confirm that their transactions go through when they should and shows descriptive alerts when they shouldn&rsquo;t, such as when the user has insufficient Bitcoin balance.</p>

<p>We also made it easy for users to find each other by implementing an autosuggest user search feature with Twitter&rsquo;s Typeahead.js, and brought the user objects to the views with the gon gem. Finally, Tender features a robust testing suite with Rspec and Capybara, at 92% code coverage.</p>

<p>This was a very interesting project on many levels, from working with a new payment type like Bitcoin, to getting deep into the mechanics of messaging. I also learned quite a bit about implementing complex Javascript features in Rails.</p>
]]></content>
  </entry>
  
</feed>
