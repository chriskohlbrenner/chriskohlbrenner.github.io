<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | CEK.io]]></title>
  <link href="http://cek.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://cek.io/"/>
  <updated>2019-06-27T11:22:27+01:00</updated>
  <id>http://cek.io/</id>
  <author>
    <name><![CDATA[Chris Eaves-Kohlbrenner]]></name>
    <email><![CDATA[c.kohlbrenner@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Should You Ever Edit Your Gemfile.lock? (No...But Maybe Sometimes...Conservatively)]]></title>
    <link href="http://cek.io/blog/2014/07/23/edit-gemfile-dot-lock/"/>
    <updated>2014-07-23T15:19:30+01:00</updated>
    <id>http://cek.io/blog/2014/07/23/edit-gemfile-dot-lock</id>
    <content type="html"><![CDATA[<p>When developing a Rails app, should you ever edit your Gemfile.lock? Easy answer: it&rsquo;s no, right? <a href="http://stackoverflow.com/a/11136025/3166243">Plenty</a> <a href="http://codedecoder.wordpress.com/2013/01/02/difference-gemfile-lock-rails/">of</a> <a href="http://asciicasts.com/episodes/201-bundler">reputable</a> <a href="http://codelikethis.com/lessons/ruby_tools/bundler">sources</a> all seem to discourage it. I myself gave that answer when asked recently. But I&rsquo;ve come to learn that the answer is not a complete cut-and-dried &ldquo;no&rdquo;, at least not in certain circumstances.</p>

<!--more-->




<h3>Some background</h3>


<p>How does the Gemfile work? A quick refresher:</p>

<ul>
  <li>
    The Gemfile is a list of all gems that you want to include in the project. It is used with bundler to install, update, remove and otherwise manage your used gems.
  </li>
  <li>
    <a href="http://bundler.io/">Bundler</a> "provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed. Bundler is an exit from dependency hell, and ensures that the gems you need are present in development, staging, and production. Starting work on a project is as simple as bundle install."
  </li>
  <li>
    Simply put, we list our gems and dependencies in the Gemfile, run <code>bundle install</code>, a Gemfile.lock is generated, and our dependencies are taken care of. Right?
  </li>
</ul>




<h3>What happens when we <code>bundle install</code>?</h3>


<p>Quoting the bundler documentation:
<blockquote><p>Install the gems specified in your Gemfile. If this is the first time you run bundle install (and a Gemfile.lock does not exist), bundler will fetch all remote sources, resolve dependencies and install all needed gems.</p></p><p><p>If a Gemfile.lock does exist, and you have not updated your Gemfile, bundler will fetch all remote sources, but use the dependencies specified in the Gemfile.lock instead of resolving dependencies.</p></p><p><p>If a Gemfile.lock does exist, and you have updated your Gemfile, bundler will use the dependencies in the Gemfile.lock for all gems that you did not update, but will re-resolve the dependencies of gems that you did update.</p><footer><strong>Bundler.io <a href="http://bundler.io/v1.6/man/bundle-install.1.html">http://bundler.io/v1.6/man/bundle-install.1.html</a> bundle-install</strong></footer></blockquote></p>

<p>No surprises here. This fits with the general understanding of Bundler and Gemfiles. But keep this in mind as you continue below, since the resolving of dependencies may mean more than you realize.</p>

<h3>Introducing some controversy: conservative gem updates</h3>


<p>Imagine this situation:
You run <code>bundle update cucumber-rails</code>, thinking it will only update <code>cucumber-rails</code>. In fact, this actually updates not just <code>cucumber-rails</code>, but all of its dependencies as well, which will explode in your face when one of these dependencies release a new version with breaking API changes. This happens all too often.</p>

<p>Lest you think I&rsquo;m all alone in this, know that I&rsquo;m pulling the above example from <a href="http://makandracards.com/makandra/13885-how-to-update-a-single-gem-conservatively">this post from Makandra Cards</a>, and the idea in general from more experienced developers than myself. The author of the post suggests three options for conservative gem updates, the first of which is to make changes directly to Gemfile.lock.</p>

<p>Crazy, right? Controversial, even? Perhaps not. To date, Bundler has not acknowledged <a href="https://github.com/bundler/bundler/issues/2016">this issue</a>, but there&rsquo;s a significant use case (edge case, perhaps) that calls for editing Gemfile.lock. Just do it conservatively. Everything in moderation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Closures]]></title>
    <link href="http://cek.io/blog/2014/07/16/closures-ruby/"/>
    <updated>2014-07-16T17:12:48+01:00</updated>
    <id>http://cek.io/blog/2014/07/16/closures-ruby</id>
    <content type="html"><![CDATA[<p>As I continue to learn JavaScript, I continue to run in to closures. And while I had some understanding of what that word means, when I came across <a href="http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/">this blog post</a> from <a href="https://twitter.com/skorks">Alan Sorkin</a>, it helped clear a few things up. This post focuses on closures in Ruby, hopefully in a way that illustrates the concept of closures more generally, irrespective of language.</p>

<h3>Closures defined</h3>


<p>Sorkin defines closures as follows:
<blockquote><p>A closure is basically a function/method that has the following two properties:</p></p><p><pre><code>- You can pass it around like an object (to be called later)<br/>- It remembers the values of all the variables that were in scope when the function was created. It is then able to access those variables when it is called even though they may no longer be in scope.<br/></code></pre></p><p><p></p><footer><strong>Alan Sorkin <a href="http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/">http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/</a>  Closures – A Simple Explanation (Using Ruby)</strong></footer></blockquote></p>

<p>This is much clearer than the other definitions we sometimes hear, which Sorkin alludes to as (1) &ldquo;In computer science, a closure is a first-class function with free variables that are bound in the lexical environment&rdquo; or (2) &ldquo;A closure is a function that is said to be &lsquo;closed over&rsquo; its free variables&rdquo;. As we&rsquo;ll see, these definitions have value, but what exactly do they mean? Let&rsquo;s look at some code.</p>

<!--more-->


<h3>Code example in Ruby</h3>


<p>``` ruby SomeClass of Closures
class SomeClass
  def initialize(value1)</p>

<pre><code>@value1 = value1
</code></pre>

<p>  end</p>

<p>  def value_printer(value2)</p>

<pre><code>lambda {puts "Value1: #{@value1}, Value2: #{value2}"}   #=&gt; create closure using a lambda
</code></pre>

<p>  end
end</p>

<p>def caller(some_closure)
  some_closure.call
end</p>

<p>some_class = SomeClass.new(5)
printer = some_class.value_printer(&ldquo;some value)</p>

<p>caller(printer)
```</p>

<p>When executed, this code prints: <code>Value1: 5, Value2: some value</code>. So what&rsquo;s going on here? As Sorkin describes, &ldquo;the <code>value_printer</code> function creates a closure, using the lambda construct, and then returns it. We then assign our closure to a variable and pass that variable to another function, which then calls our closure. This satisfies the first property of a closure – we can pass it around.&rdquo;</p>

<p>Furthermore, &ldquo;when we called our closure, we printed out <code>5</code> and <code>some value</code>. Even though both the <code>@value1</code> and <code>value2</code> variables were both well and truly out of scope in the rest of the program when we finally called the closure; inside the closure they were still in scope as it retained the state of all the variables that were in scope when it was defined. And so, our lambda satisfies the second property also which makes it a closure.&rdquo;</p>

<p>To the earlier point, we can now better understand the technical definitions. First-class function: a function that can be passed around like an object. Lexical environment: variables that are defined in the closure&rsquo;s scope. These are what make a closure a closure.</p>

<h3>Why?</h3>


<p>This made closures a lot clearer to me, but a question remained: why? What are some use cases for this pattern? Sorkin argues that closures are especially useful in functional languages (which are inherently stateless) because &ldquo;we can use closures to essentially store some state which will persist as long as our closure lives on (i.e. if the closure changes the value of a variable it will retain the new value the next time the closure is invoked).&rdquo; This enables us to <strong>do more with less code</strong>.</p>

<p>In non-functional languages? Also to do more with less code. Closures in Ruby come in the form of blocks, lambdas (as in the code example above), and blocks, all of which provide advantages in refactoring, customization, iterating across collections, managing resources, and enforcing policy. There are a number of use cases, some of which are described in <a href="http://www.technicalecstasy.net/closures-in-ruby-blocks-procs-and-lambdas/">this overview</a>.</p>

<h3>Resources</h3>


<ul>
  <li><a href="http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/">Closures – A Simple Explanation (Using Ruby)</a></li>
  <li><a href="http://innig.net/software/ruby/closures-in-ruby">Closures in Ruby: Blocks, Procs and Lambdas</a></li>
  <li><a href="http://www.technicalecstasy.net/closures-in-ruby-blocks-procs-and-lambdas/">Closures in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing, Low- to High-Level]]></title>
    <link href="http://cek.io/blog/2014/06/24/low-to-high-testing/"/>
    <updated>2014-06-24T19:32:42+01:00</updated>
    <id>http://cek.io/blog/2014/06/24/low-to-high-testing</id>
    <content type="html"><![CDATA[<p>Google &ldquo;low level&rdquo; and you&rsquo;ll see the following definition.</p>

<p><img class="right" src="/images/low-to-high-testing/low-level.png" width="400"></p>

<p>We often hear about low-level languages like Assembly or C (which was once a high-level language) vs. high-level languages like Java or Ruby (which may come to be considered low-level?).</p>

<p>Applying that same logic to testing, this blog post covers the various types of tests for Rails applications, working its way up from low-level unit tests up to high-level acceptance tests, with functional and integration tests in between. Along the way, I&rsquo;ll reference examples of tests I wrote for a side project: my <a href="http://world-cup-14.herokuapp.com/">World Cup tracker</a>.</p>

<!--more-->




<h3>Unit Tests (Model Tests)</h3>


<p>The <a href="http://guides.rubyonrails.org/testing.html">Rails Guide on testing</a> describes unit tests as &ldquo;what you write to test your models.&rdquo; It continues, &ldquo;It&rsquo;s a good practice to have at least one test for each of your validations and at least one test for every method in your model.&rdquo;</p>

<p>I won&rsquo;t get into FactoryGirl in detail, but here I create a factory for the Team model, which I use instead of fixtures as test data for team_spec.rb.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (teams_factory.rb)</span> <a href='/downloads/code/low-to-high-testing/teams_factory.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:team</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">api_id</span> <span class="s2">&quot;A0CD1355-B6FC-48D3-B67B-AF5AA2B2C1E1&quot;</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;Croatia&quot;</span>
</span><span class='line'>    <span class="n">logo</span> <span class="s2">&quot;http://cache.images.globalsportsmedia.com/soccer/teams/150x150/514.png&quot;</span>
</span><span class='line'>    <span class="n">website</span> <span class="s2">&quot;http://www.hns-cff.hr/&quot;</span>
</span><span class='line'>    <span class="n">group_letter</span> <span class="s2">&quot;A&quot;</span>
</span><span class='line'>    <span class="n">group_rank</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">group_points</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">matches_played</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">wins</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">losses</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">draws</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">goals_for</span> <span class="mi">6</span>
</span><span class='line'>    <span class="n">goals_against</span> <span class="mi">6</span>
</span><span class='line'>    <span class="n">goal_differential</span> <span class="s2">&quot;+0&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (team_spec.rb)</span> <a href='/downloads/code/low-to-high-testing/team_spec.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Team</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;has a valid factory&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">build</span><span class="p">(</span><span class="ss">:team</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:croatia</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:team</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:brazil</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:team</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Brazil&quot;</span><span class="p">,</span> <span class="ss">:group_rank</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:group_points</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span> <span class="ss">:wins</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:losses</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">:draws</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:goals_for</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span> <span class="ss">:goals_against</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#next_match&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;when there are upcoming matches&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;returns the match object&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">pending</span><span class="p">(</span><span class="s2">&quot;pending until test can retrieve match objects&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">this_should_not_get_executed</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#next_opponent&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;when there are upcoming matches&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;returns the team object&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">pending</span><span class="p">(</span><span class="s2">&quot;pending until test can retrieve team objects&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">this_should_not_get_executed</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#avg_goals_against&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns the avg goals against value&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">croatia</span><span class="o">.</span><span class="n">avg_goals_against</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#avg_goals_for&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns the avg goals for value&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">brazil</span><span class="o">.</span><span class="n">avg_goals_for</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">33</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Functional Tests (Controller Tests)</h3>


<p>The testing RailsGuide explains, &ldquo;In Rails, testing the various actions of a single controller is called writing functional tests for that controller. Controllers handle the incoming web requests to your application and eventually respond with a rendered view.&rdquo; RSpec&rsquo;s documentation explains &ldquo;A controller spec is an RSpec wrapper for a Rails functional test.&rdquo; So functional tests and controller tests are synonymous.</p>

<p>The main purpose of functional tests, as the quote above makes clear, is to ensure that individual controllers handle requests appropriately and render the proper view. This can mean testing <a href="http://guides.rubyonrails.org/testing.html#what-to-include-in-your-functional-tests">the following</a>:</p>

<ul>
<li>Was the web request successful?</li>
<li>Was the user redirected to the right page?</li>
<li>Was the user successfully authenticated?</li>
<li>Was the correct object stored in the response template?</li>
<li>Was the appropriate message displayed to the user in the view?</li>
</ul>


<p>In the following example, I simply test that TeamsController assigns the correct resources (teams) and renders the correct views on get requests.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (teams_controller_spec.rb)</span> <a href='/downloads/code/low-to-high-testing/teams_controller_spec.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">TeamsController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET index&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;assigns @teams&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">team</span> <span class="o">=</span> <span class="no">Team</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:teams</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[</span><span class="n">team</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;renders the index template&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET show&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;renders the show template&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">team</span> <span class="o">=</span> <span class="no">Team</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>      <span class="n">get</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">})</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;show&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Integration Tests (Acceptance Tests)</h3>


<p>Depending who you ask, integration tests and acceptance tests are either identical or subtly different. They both test functionality from end-to-end (or close to it) and are both forms of black box testing, but acceptance tests have a customer orientation, whereas integration tests are written by developers for developers. The first five slides of <a href="http://www.slideshare.net/AlanHecht/integration-and-acceptance-testing">this talk</a> provide a helpful summary.</p>

<p>The testing RailsGuide defines integration tests as intended to test &ldquo;the interaction among any number of controllers. They are generally used to test important work flows within your application.&rdquo; The &ldquo;important work flows&rdquo; are the key; integration tests should test the application from end-to-end&mdash;across multiple models, controllers, and views&mdash;to ensure that the application works &ldquo;in integration&rdquo;.</p>

<p>ExtremeProgramming.org defines acceptance tests as follows: &ldquo;Acceptance tests are created from user stories. During an iteration the user stories selected during the iteration planning meeting will be translated into acceptance tests. &hellip; Acceptance tests are black box system tests. Each acceptance test represents some expected result from the system.&rdquo; Another key: black box testing, testing an for the proper output given a certain input, without knowing what happens inside the &ldquo;black box&rdquo; (that&rsquo;s what unit and functional tests are for).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (team_index_spec.rb)</span> <a href='/downloads/code/low-to-high-testing/team_index_spec.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;Team index page&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:team</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Croatia&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;renders the correct text&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;/teams&#39;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_text</span><span class="p">(</span><span class="s1">&#39;2014 World Cup Teams&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_text</span><span class="p">(</span><span class="s1">&#39;Croatia&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Conclusion</h3>


<p>CodeClimate describes what they call <a href="http://blog.codeclimate.com/blog/2013/10/09/rails-testing-pyramid/">the Rails Testing Pyramid</a>, depicted below:</p>

<p><img class="left <a" src="href="http://blog.codeclimate.com/images/posts/rails-testing-pyramid.png">http://blog.codeclimate.com/images/posts/rails-testing-pyramid.png</a>" width="400"></p>

<p>They write, &ldquo;Blending unit tests, service-level tests and acceptance tests yields faster test suites that still provide confidence the application is working, and are resistant to incidental breakage. As you develop, take care to prune tests that are not pulling their weight. When you fix a bug, implement your regression test at the lowest possible level. Over time, keep an eye on the ratio between the counts of each type of test, as well as the time of your acceptance test suite.&rdquo;</p>

<p>In the case of the Team resource in my World Cup app, my ratio was 1 integration test:3 functional tests:5 unit tests&mdash;a perfectly pyramidal ratio if you ask me! Of course, this is a simple example, but it illustrates the goal for a test suite more generally.</p>

<h3>Resources</h3>


<ul>
<li><a href="http://betterspecs.org/">BetterSpecs</a></li>
<li><a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a></li>
<li><a href="http://guides.rubyonrails.org/testing.html">RailsGuides: A Guide to Testing Rails Applications</a></li>
<li>&ldquo;How I learned to test my Rails applications&rdquo; (Part <a href="http://everydayrails.com/2012/03/12/testing-series-intro.html">1</a> | <a href="http://everydayrails.com/2012/03/12/testing-series-rspec-setup.html">2</a> | <a href="http://everydayrails.com/2012/03/19/testing-series-rspec-models-factory-girl.html">3</a> | <a href="http://everydayrails.com/2012/04/07/testing-series-rspec-controllers.html">4</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Cost-Effective Testing (POODR: Chapter 9)]]></title>
    <link href="http://cek.io/blog/2014/06/10/poodr-ch-9/"/>
    <updated>2014-06-10T15:17:18+01:00</updated>
    <id>http://cek.io/blog/2014/06/10/poodr-ch-9</id>
    <content type="html"><![CDATA[<p><strong>I am working my way through programming-related reading, currently with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<hr />

<br>


<p>I&rsquo;ve written about testing <a href="http://cek.io/blog/categories/testing/">previously</a>, but Sandi Metz, in the last chapter of POODR, lends some valuable insights to testing, specifically about writing <strong>cost-effective</strong> tests with an emphasis on <strong>changeable code</strong>. In this post, I simply reference some of her comments on testing that I found most helpful.</p>

<h3>Why Test?</h3>


<p>Metz starts by describing, &ldquo;Writing changeable code is an art whose practice relies on three different skills&rdquo; (191). These three skills, as she sees them, are:</p>

<ul>
<li>Understanding object-oriented design</li>
<li>Refactoring code</li>
<li>Writing high-value tests</li>
</ul>


<!--more-->




<h3>What if the tests are costly themselves?</h3>


<p>&ldquo;The true purpose of testing, just like the true purpose of design, is to reduce costs. If writing, maintaining, and running tests consumes more time than would otherwise be needed to fix bugs, write documentation, and design applications tests are clearly not worth writing and no rational person would argue otherwise&rdquo; (192).</p>

<p>&ldquo;The solution to the problem of costly tests, however, is not to stop testing but instead to get better at it. Getting good value from tests requires clarity of intention and knowing what, when, and how to test&rdquo; (192).</p>

<h3>Benefits of Testing</h3>


<ul>
<li><u>Finding Bugs [and finding them early]</u> &ndash; &ldquo;Fixing bugs early always lowers costs&rdquo; (193).</li>
<li><u>Supplying Documentation</u> &ndash; &ldquo;Tests provide the only reliable documentation of design&hellip;long after paper documents become obsolete and human memory fails&rdquo; (193).</li>
<li><u>Deferring Design Decisions</u> &ndash; &ldquo;Tests allow you to safely defer design decisions&hellip;when you are aware of just one concrete case in the present but you fully expect new cases to arrive in the near future&rdquo; (193).</li>
<li><u>Supporting Abstractions</u> &ndash; &ldquo;There is a level of design abstraction where it is almost impossible to safely make any change unless the code has tests&rdquo; (194).</li>
<li><u>Exposing Design Flaws</u> &ndash; &ldquo;Tests are the canary in the coal mine; when the design is bad, testing is hard&rdquo; (194).</li>
</ul>


<h3>Know what to test</h3>


<p>&ldquo;Most programmers write too many tests&hellip;The safest way to [write fewer tests] is to test everything just once and in the proper place&rdquo; (194).</p>

<h3>Know when to test</h3>


<p>&ldquo;You should write tests first, whenever it makes sense to do so&hellip;Be warned, however, that writing tests first is no substitute for and does not guarantee a well-designed application&rdquo; (197).</p>

<h3>Know how to test</h3>


<p>&ldquo;There are many good reasons to stay within the testing mainstream [with frameworks like MiniTest and RSpec]&hellip;Both [TDD and BDD] are completely acceptable. Each has costs and benefits&rdquo; (199).</p>

<h3>In conclusion</h3>


<p><blockquote><p>Tests are indispensable. Well-designed applications are highly abstract and under constant pressure to evolve; without tests these applications can neither be understood nor safely changed. The best tests are loosely coupled to the underlying code and test everything once and in the proper place. They add value without increasing costs.</p></p><p><p>A well-designed application with a carefully crafted test suite is a joy to behold and a pleasure to extend. It can adapt to every new circumstance and meet any unexpected need.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (240)</strong></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Cheerful, Detached, and Merciless': Composition and Code Arrangement in Ruby (POODR: Chapter 8)]]></title>
    <link href="http://cek.io/blog/2014/05/27/poodr-ch-8/"/>
    <updated>2014-05-27T14:57:39+01:00</updated>
    <id>http://cek.io/blog/2014/05/27/poodr-ch-8</id>
    <content type="html"><![CDATA[<p><strong>I am working my way through programming-related reading, currently with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<hr />

<br>


<p>Sandi Metz describes object-oriented composition&mdash;the combining of simple, independent objects into larger, more complex wholes, in which the larger object is connected to its parts via a &lsquo;has-a&rsquo; relationship&mdash;and code arrangement in Ruby more generally:</p>

<p><blockquote><p>Composition allows you to combine small parts to create more complex objects such that the <strong>whole becomes more than the sum of its parts</strong>. Composed objects tend to consist of simple, discrete entities that can easily be rearranged into new combinations. These simple objects are easy to understand, reuse, and test, but because they combine into a more complicated whole, the operation of the bigger application may not be as easy to understand as that of the individual parts.</p></p><p><p>Composition, <a href="http://cek.io/blog/2014/05/06/poodr-ch-6/">classical inheritance</a>, and <a href="http://cek.io/blog/2014/05/26/poodr-ch-7/">behavior sharing via modules</a> are competing techniques for arranging code. Each has different costs and benefits; these differences predispose them to be better at solving slightly different problems.</p></p><p><p>These techniques are tools, nothing more, and <strong>you’ll become a better designer if you practice each of them</strong>. Learning to use them properly is a matter of experience and judgment, and one of the best ways to gain experience is to learn from your own mistakes. <strong>The key to improving your design skills is to attempt these techniques, accept your errors cheerfully, remain detached from past design decisions, and refactor mercilessly</strong>.</p></p><p><p>As you gain experience, you’ll get better at choosing the correct technique the first time, your costs will go down, and your applications will improve.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (190)</strong></footer></blockquote></p>

<p>Cheerful, detached, and merciless. New descriptors of a <a href="http://threevirtues.com/">virtuous programmer</a>?</p>
]]></content>
  </entry>
  
</feed>
