<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Non-Code | CEK.io]]></title>
  <link href="http://cek.io/blog/categories/non-code/atom.xml" rel="self"/>
  <link href="http://cek.io/"/>
  <updated>2017-08-17T18:08:27-04:00</updated>
  <id>http://cek.io/</id>
  <author>
    <name><![CDATA[Chris Eaves-Kohlbrenner]]></name>
    <email><![CDATA[c.kohlbrenner@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Hammer of JavaScript (and Other Tools for Other Nails)]]></title>
    <link href="http://cek.io/blog/2016/02/08/javascript-hammer/"/>
    <updated>2016-02-08T11:10:04-05:00</updated>
    <id>http://cek.io/blog/2016/02/08/javascript-hammer</id>
    <content type="html"><![CDATA[<p><em>The one where I get a harsh reminder to question my instincts from a real-life experience of <a href="https://xkcd.com/1319/">this XKCD comic</a>.</em></p>

<p>As a mental exercise, a friend proposed the following potential interview question: given a directory with 10,000 files of text, how would you extract all the phone numbers from that directory into a single file?</p>

<p>My immediate thought: this would be a basic assessment of someone&rsquo;s knowledge of:</p>

<ol>
<li>regular expressions to match patterns of numbers</li>
<li>how to programmatically read/write files</li>
<li>basic algorithmic complexity for iterating through files quickly.</li>
</ol>


<p>I even knew how I&rsquo;d implement it: use node&rsquo;s filesystem module to read the files, parse them for regex matches, and write all matches to a new file.</p>

<p><img class="right" src="/images/hammer-nail.jpg" width="300"></p>

<p>I was intrigued enough that I decided to prove it out. I wrote a basic phone number regex by hand (<code>\d{3}(-|\s|\.)?\d{3}(-|\s|\.)?\d{4}\</code> (for 3 digits, 3 digits, and 4 digits separated by hyphens, periods, spaces, or nothing), and looked into popular phone number regexes. I realized how unfamiliar I am with <a href="https://nodejs.org/api/fs.html">Node&rsquo;s filesystem module</a> (<code>readdir</code> and <code>readFile</code> and <code>writeFile</code>). Then I got curious about <a href="https://docs.npmjs.com/getting-started/publishing-npm-packages">publishing npm packages</a>. Before I knew it, I&rsquo;d spent a couple hours and produced a <a href="https://www.npmjs.com/package/collect-phone-numbers">somewhat polished npm project</a> for this hypothetical task.</p>

<p>And it was all wrong.</p>

<!--more-->


<p>The thought process I used was logical. My work as a software engineer focuses almost entirely on the web, JavaScript, build tools, UI features, HTTP servers. I&rsquo;m comfortable with databases, front- and back-end code, version control, and countless other things. But that&rsquo;s a small subset of software! Classic hammer/nail.</p>

<p>To Wikipedia:
<blockquote><p>Software: any set of instructions that directs a computer to perform specific tasks or operations.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Software">https://en.wikipedia.org/wiki/Software</a> &ldquo;Software&rdquo;</strong></footer></blockquote></p>

<p>Software is about problem-solving. But problems can&rsquo;t be solved well without being understood. And they won&rsquo;t be well understood if we assume we should use the same solution every time. There&rsquo;s something to be said for using the tools you know, but software also requires a humility to recognize when a given tool is the wrong one.</p>

<p>In this case, I skipped the step of analyzing the problem. I didn&rsquo;t think about the specifics of the problem, the tradeoffs of time, or the alternative solutions I could choose. This was a one-time, approximate task. It was unlikely to be repeated often enough to make automating worthwhile. And yet I instinctually went with what I knew, implementing a &ldquo;good&rdquo;, &ldquo;complete&rdquo; solution that was really just a picture of overengineering.</p>

<p><img class="left <a" src="href="https://imgs.xkcd.com/comics/automation.png">https://imgs.xkcd.com/comics/automation.png</a>" width="300"></p>

<p>For a problem like this, why use another language or abstraction when it can be done via the command line, the text interface for the computer itself and a much more direct interface with the filesystem? Why use a language like JavaScript that&rsquo;s best suited for the web or pull in Node just for the sake of using a tool I know?</p>

<p>These are questions I won&rsquo;t soon forget to ask myself when I take on a new problem. Hopefully that&rsquo;ll prevent me from falling into traps that webcomics are made of. I know for sure that, next time I&rsquo;m presented with a problem of finding text within a filesystem, I&rsquo;ll remember that tools like <code>grep</code> were made for exactly that. A simpler, less time-instensive, and more appropriate solution.</p>

<p><code>egrep "\b[[:digit:]]{3}(-|\s|.)?[[:digit:]]{3}(-|\s|.)?[[:digit:]]{4}\b" ./* &gt; ./nums.txt</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Old and New Years]]></title>
    <link href="http://cek.io/blog/2015/01/03/new-year/"/>
    <updated>2015-01-03T12:14:20-05:00</updated>
    <id>http://cek.io/blog/2015/01/03/new-year</id>
    <content type="html"><![CDATA[<p>Happy new year! A resolution of mine for 2015 is to write more&mdash;not just code, which is itself an admirable goal, but human-readable English. This was motivated by (1) the advice in <a href="http://www.shubhro.com/2014/12/27/software-engineers-should-write/">this article</a> I read recently, which is <a href="http://bit.ly/1K9MAZk">not new advice</a>, (2) the hope that, for all the benefits of specialization, there&rsquo;s value in maintaining competence in both programming and verbal language, and (3) the fact that I like writing! So you can expect more consistent posts than the last six months have yielded.</p>

<p>My commitment to blog is also part of a larger goal: to further establish myself as a software engineer, which means (among other things like improving my technical skills) better understanding the industry. Recognizing my ignorance about computer science and its history, I put <a href="http://www.nytimes.com/2014/10/09/arts/walter-isaacsons-the-innovators-studies-computer-wizards.html">Walter Isaacson&rsquo;s &ldquo;The Innovators&rdquo;</a> on my Christmas wishlist.</p>

<p>I&rsquo;m only two chapters in, but I&rsquo;m already struck by two major things: (1) the main thesis arguing that innovation is more attributable to collaboration than to singular genius and (2) the convergence of technological advances in the year 1937, all of which accelerated towards the modern computer.</p>

<!--more-->


<p>Isaacson writes:</p>

<p><blockquote><p>New approaches, technologies, and theories began to emerge in 1937&hellip; It would become an annus mirabiliis of the computer age, and the result would be the triumph of four properties, somewhat interrelated, that would define modern computing.</p><footer><strong>Walter Isaacson</strong> <cite>The Innovators (38)</cite></footer></blockquote></p>

<p>He defines those four computing properties as digital, binary, electronic, and general purpose, and he summarizes the following key individuals and their contributions in (and around) 1937:</p>

<table>
<thead>
<tr>
<th></th>
<th> Person(s)                                         </th>
<th> Contribution         </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Alan Turing (Cambridge/Princeton)                 </td>
<td> Published paper of mathematical theory (addressing Hilbert&rsquo;s <em>Entscheidungsproblem</em>), with the byproduct of the conceptual &ldquo;Logical Computing Machine&rdquo;, which became known as the Turing Machine (&ldquo;It is possible to invent a single machine which can be used to compute any computable sequence&rdquo;).</td>
</tr>
<tr>
<td></td>
<td> Claude Shannon and George Stibitz (Bell Labs)     </td>
<td> Shannon figured out that electrical circuits could execute Boolean logical operations using an arrangement of on-off switches. Stibitz built the Complex Number Calculator which, based on Shannon&rsquo;s insight, showed the potential of circuit relays to do binary math, process information, and handle logical procedures.</td>
</tr>
<tr>
<td></td>
<td> Howard Aiken (Harvard)                            </td>
<td> Began plans on the Mark I which, when completed in 1944 under IBM and the Navy, was fully automatic&mdash;it could run for days without human intervention&mdash;as well as digital (though non-binary and partially mechanical).</td>
</tr>
<tr>
<td></td>
<td> Konrad Zuse (Berlin)                              </td>
<td> Finished a calculator prototype, the Z1, that was binary and could read instructions from a punched tape (though mechanical). This ultimately gave way to the Z3, which was the first fully working all-purpose, programmable digital computer.</td>
</tr>
<tr>
<td></td>
<td> John Vincent Atanasoff (Ames, Iowa)               </td>
<td> Conceived the first partly electronic digital computer, which solved linear equations. It used mechanically rotating cylinders to replenish electrical charges in condensers and thus maintain memory. Atanasoff was also (disputedly) the inspiration for John Mauchly&rsquo;s work.</td>
</tr>
<tr>
<td></td>
<td> John Mauchly and J. Presper Eckert (UPenn, 1940s) </td>
<td> With funding from the US War Department, built ENIAC (the Electronic Numerical Integrator and Computer). ENIAC was digital computer using the decimal (not binary) system, which could handle conditional branching and subroutines.</td>
</tr>
</tbody>
</table>


<br>


<p>Incredible how much took place&mdash;or was at least initiated&mdash;over the course of a single year, and telling that the contributions that persisted were ones of collaboration, whether as partnerships of key individuals (e.g., Turing, Max Newman, and Alonzo Church) or in settings with collaborative resources (e.g., Bell Labs and major universities). Without diminishing their significance, those lone innovators were ultimately unable to mark history in the same way (e.g., Atanasoff, whose prototype was forgotten and dismantled, or Zuse, whose work with a single college friend was interrupted and lost when he was pulled into engineering airplanes for the German military).</p>

<p>As we head into this new year, I can only hope 2015 will be half as innovative as 1937, and that I can apply those lessons of collaboration to my blog and my continued growth as a developer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ira Glass on Storytelling [and Programming]]]></title>
    <link href="http://cek.io/blog/2014/05/11/the-gap/"/>
    <updated>2014-05-11T13:54:09-04:00</updated>
    <id>http://cek.io/blog/2014/05/11/the-gap</id>
    <content type="html"><![CDATA[<p><a href="http://vimeo.com/85040589">&ldquo;For everyone in doubt, especially for myself&hellip;&rdquo;</a>.</p>

<p><blockquote><p><strong>Nobody tells people who are beginners</strong>&mdash;and I really wish somebody had told this to me&mdash;is that all of us who do creative work, like, you know, we get into it, and we get into it because <strong>we have good taste</strong>.</p></p><p><p>But it&rsquo;s like there&rsquo;s a gap. That <strong>for the first couple years that you&rsquo;re making stuff, what you&rsquo;re making isn&rsquo;t so good</strong>. Ok, it&rsquo;s not that great. It&rsquo;s trying to be good, <strong>it has ambition to be good, but it&rsquo;s not quite that good</strong>. But your taste, the thing that got you into the game, your taste is still killer. And your taste is good enough that you can tell, that what you&rsquo;re making is kind of a disappintment to you&mdash;you know what I mean? A lot of people never get past that phase. A lot of people at that point, they quit.</p></p><p><p>And the thing I would just, like, say to you, with all of my heart, is that <strong>most everybody I know</strong>, who does interesting, creative work&mdash;<strong>they went through a phase of years where they had really good taste, they could tell what they were making wasn&rsquo;t as good as they wanted it to be</strong>. They knew it fell short. It didn&rsquo;t have this special thing that we wanted it to have. And, the thing I would say to you is: <strong>everybody goes through that</strong>.</p></p><p><p>And for you to go through it, if you&rsquo;re going through it right now, if you&rsquo;re just getting out of that phase, you gotta know&mdash;<strong>it&rsquo;s totally normal</strong>. And the most important possible thing you could do is do a lot of work. Do a huge <strong>volume of work</strong>. Put yourself on a deadline, so that every week or every month, you know you&rsquo;re gonna finish one story.</p></blockquote></p>

<p>(or learn one technology, or complete one app&hellip;)</p>

<p><blockquote><p>Because it&rsquo;s only by actually going through a volume of work that you&rsquo;re actually going to catch up and close that gap, and the work you&rsquo;re making will be <strong>as good as your ambitions</strong>.</p></p><p><p>It takes a while, it&rsquo;s gonna take you a while, <strong>it&rsquo;s normal to take a while, and you just have to fight your way through that</strong>. Okay?</p><footer><strong>Ira Glass <a href="http://vimeo.com/85040589">http://vimeo.com/85040589</a> &ldquo;The Gap&rdquo;</strong></footer></blockquote></p>

<p>Take two minutes and <a href="http://vimeo.com/85040589">watch it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Then and Now]]></title>
    <link href="http://cek.io/blog/2014/02/04/then-and-now/"/>
    <updated>2014-02-04T18:40:22-05:00</updated>
    <id>http://cek.io/blog/2014/02/04/then-and-now</id>
    <content type="html"><![CDATA[<p>It is August 2007, and I&rsquo;m sitting in my freshman dorm at Wheaton College. A few days after arriving on campus to <a href="http://www.wunderground.com/history/airport/KDPA/2007/8/23/DailyHistory.html">record-setting rains</a> and a few days before classes began, there was one unified, collective priority: internet. In those days we hadn&rsquo;t yet realized how bad the internet would be: how low the bandwidth, how weak the wifi, and just how persistent(ly annoying) the Bradford Agent.  They were simple times&mdash;the first iPhone had just been released, for example, and few of us had even heard of Twitter&mdash;and we were simply excited to check our email and Facebook.  Yet so few of us could.</p>

<p>Somehow I had very quickly found my way online,<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>before all but a few dorm-mates, when in walked my future roommate. Andrew was astounded to find that I had internet access, and was even more astonished at how quickly I went through the same walkthrough (this time from memory) for him. News quickly spread of the &ldquo;computer genius&rdquo; in room 207 who could configure everyone&rsquo;s internet settings. That news began to change just as quickly when Mac users came asking for help, only to leave disappointed.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>That said, I not only made a life-long friend that day, but I established for him a reputation as a computer nerd, a reputation that has endured (in his mind, anyway), however facetiously. Here on Day 2 at the Flatiron School, I&rsquo;m only at the very beginning of my effort to establish that reputation in reality, but check in again in three months! Until then, for those who missed the memo, <a href="http://flatironschool.com">this</a> is what I&rsquo;ll be doing &lsquo;til April and beyond.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I had asked IT Services, who had given me a straightforward walkthrough.<br><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>They had given me a walkthrough that worked for my Dell, but not for Macs&hellip;<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://cek.io/blog/2014/02/04/hello-world/"/>
    <updated>2014-02-04T17:42:46-05:00</updated>
    <id>http://cek.io/blog/2014/02/04/hello-world</id>
    <content type="html"><![CDATA[<p>Hello, world! First post coming out of Flatiron School, Ruby 004. More to come.</p>
]]></content>
  </entry>
  
</feed>
