<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Modules | CEK.io]]></title>
  <link href="http://cek.io/blog/categories/modules/atom.xml" rel="self"/>
  <link href="http://cek.io/"/>
  <updated>2018-11-06T07:27:02-08:00</updated>
  <id>http://cek.io/</id>
  <author>
    <name><![CDATA[Chris Eaves-Kohlbrenner]]></name>
    <email><![CDATA[c.kohlbrenner@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA['Cheerful, Detached, and Merciless': Composition and Code Arrangement in Ruby (POODR: Chapter 8)]]></title>
    <link href="http://cek.io/blog/2014/05/27/poodr-ch-8/"/>
    <updated>2014-05-27T06:57:39-07:00</updated>
    <id>http://cek.io/blog/2014/05/27/poodr-ch-8</id>
    <content type="html"><![CDATA[<p><strong>I am working my way through programming-related reading, currently with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<hr />

<br>


<p>Sandi Metz describes object-oriented composition&mdash;the combining of simple, independent objects into larger, more complex wholes, in which the larger object is connected to its parts via a &lsquo;has-a&rsquo; relationship&mdash;and code arrangement in Ruby more generally:</p>

<p><blockquote><p>Composition allows you to combine small parts to create more complex objects such that the <strong>whole becomes more than the sum of its parts</strong>. Composed objects tend to consist of simple, discrete entities that can easily be rearranged into new combinations. These simple objects are easy to understand, reuse, and test, but because they combine into a more complicated whole, the operation of the bigger application may not be as easy to understand as that of the individual parts.</p></p><p><p>Composition, <a href="http://cek.io/blog/2014/05/06/poodr-ch-6/">classical inheritance</a>, and <a href="http://cek.io/blog/2014/05/26/poodr-ch-7/">behavior sharing via modules</a> are competing techniques for arranging code. Each has different costs and benefits; these differences predispose them to be better at solving slightly different problems.</p></p><p><p>These techniques are tools, nothing more, and <strong>you’ll become a better designer if you practice each of them</strong>. Learning to use them properly is a matter of experience and judgment, and one of the best ways to gain experience is to learn from your own mistakes. <strong>The key to improving your design skills is to attempt these techniques, accept your errors cheerfully, remain detached from past design decisions, and refactor mercilessly</strong>.</p></p><p><p>As you gain experience, you’ll get better at choosing the correct technique the first time, your costs will go down, and your applications will improve.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (190)</strong></footer></blockquote></p>

<p>Cheerful, detached, and merciless. New descriptors of a <a href="http://threevirtues.com/">virtuous programmer</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roles, Modules, and Mix-Ins in Ruby (POODR: Chapter 7)]]></title>
    <link href="http://cek.io/blog/2014/05/26/poodr-ch-7/"/>
    <updated>2014-05-26T08:52:50-07:00</updated>
    <id>http://cek.io/blog/2014/05/26/poodr-ch-7</id>
    <content type="html"><![CDATA[<p><strong>I am working my way through programming-related reading, currently with Sandi Metz&rsquo;s &ldquo;Practical Object-Oriented Design in Ruby&rdquo;. Click <a href="http://cek.io/blog/categories/poodr/">here for more posts about POODR</a>.</strong></p>

<p><strong>Summary</strong>: When multiple objects play a common role, modules allow objects to share behavior. Ruby does not support multiple inheritance directly, but does so through mixins, or classes mixed with modules. The <a href="http://cek.io/blog/2014/05/26/poodr-ch-7#code">Memorial Day example below</a> illustrates modules and mixins.</p>

<hr />

<br>


<p>Remember the strategy of sharing behavior through classical inheritance, which I discussed in <a href="http://cek.io/blog/2014/05/06/poodr-ch-6/">this post</a>? It turns out there&rsquo;s a problem: inheritance cannot combine two existing subclasses. For that, we need to understand roles and modules.</p>

<h5>Quick test</h5>


<p>How many types of methods can an object respond to in Ruby? That is, in how many different ways can methods be implemented?</p>

<h5>Answer (read on)</h5>


<!--more-->


<p>Four. An object can respond to the following messages:</p>

<ol>
<li>Those it implements.</li>
<li>Those implemented in all objects above it in the hierarchy.</li>
<li>Those implemented in any module that has been added to it.</li>
<li>Those implemented in all modules added to any object above it in the hierarchy.</li>
</ol>


<p>Modules add two of the four kinds of messages that objects can respond to in Ruby. Kind of a big deal. They enable objects to share roles.</p>

<h3>Roles</h3>


<p><blockquote><p>Some problems require <strong>sharing behavior among otherwise unrelated objects</strong>. This common behavior is orthogonal to class; it’s <strong>a role an object plays</strong>. [&hellip;] When formerly unrelated objects begin to play a common role, they enter into a relationship with the objects for whom they play the role. These relationships are not as visible as those created by the subclass/superclass requirements of classical inheritance but they exist nonetheless.</p></blockquote></p>

<p>Furthermore, Metz writes:
<blockquote><p>When a role needs shared behavior you’re faced with <strong>the problem of organizing the shared code</strong>. [&hellip;] Many object-oriented languages provide a way to define a named group of methods that are independent of class and can be mixed in to any object. <strong>In Ruby, these mix-ins are called modules</strong>. Methods can be defined in a module and then the module can be added to any object. Modules thus provide a perfect way to <strong>allow objects of different classes to play a common role using a single set of code.</strong>&ldquo;</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (142-143)</strong></footer></blockquote></p>

<h3>Inheritable Code</h3>


<p>The whole point of modules is to enable us to write good code. But Metz warns:
<blockquote><p>&hellip;you are equipped to write some truly frightening code. Imagine the possibilities. You can write modules that include other modules. You can write modules that override the methods defined in other modules. You can create deeply nested class inheritance hierarchies and then include these various modules at different levels of the hierarchy. You can write code that is impossible to understand, debug, or extend.</p><footer><strong>Sandi Metz <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330</a>  Practical Object-Oriented Design in Ruby (158)</strong></footer></blockquote></p>

<p>She follows this warning, however, by saying &ldquo;this very same power is what allows you to create simple structures of related objects
that elegantly fulfill the needs of your application, your task is not to avoid these
techniques but to learn to use them for the right reasons, in the right places, in the
correct way.&rdquo; The first step in this direction, Metz argues, is to write properly inheritable code.</p>

<p>A few practical object-oriented design tips for writing and maintaining inheritance hierarchies and modules:</p>

<ul>
  <li>
      <strong>"Recognize the Antipatterns"</strong>: if using variables like <code>type</code> or <code>category</code>, look to classical inheritance. If checking the class of receiving objects to determine which message to send, duck typing.
  </li>
  <li>
      <strong>"Insist on the Abstraction"</strong>: all code in an abstract superclass should apply to every class that inherits it.
  </li>
  <li>
      <strong>"Honor the Contract"</strong>: subclasses agree to a contract, promising to be substitutable for their superclasses. Maintain that substitutability.
  </li>
  <li>
      <strong>"Use the Template Method Pattern"</strong>: separate the abstract from the concrete.
  </li>
  <li>
      <strong>"Preemptively Decouple Classes"</strong>: avoid writing code that requires its inheritors to send super; instead use hook messages.
  </li>
  <li>
      <strong>"Create Shallow Hierarchies"</strong>: The shallower and narrower, the better.
      <img class="center" src="/images/poodr/shallow-hierarchies.png">
  </li>
</ul>




<h3 id="code">Code Example</h3>


<p>Being Memorial Day and all, a simple example of modules and mix-ins, in which the <code>MemorialDay</code> class mixes in both the <code>May</code> and <code>Holiday</code> modules.</p>

<p>This code allows an instance of <code>MemorialDay</code> to call (1) methods that have been implemented in the <code>MemorialDay</code> class itself, (2) methods implemented in all objects above it in the hierarchy (in this case, <code>Object</code>), and (3) methods implemented in any module that has been added, namely <code>May</code> and <code>Holiday</code>.</p>

<p><strong>Note</strong>: there is a difference between <code>include</code> and <code>extend</code> when mixing in modules&mdash;<code>include</code> is for instance methods, <code>extend</code> for class methods.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (may.rb)</span> <a href='/downloads/code/modules-mixins-poodr/may.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">May</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mondays</span>
</span><span class='line'>    <span class="c1"># Array of all Mondays in May</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">26</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">month_of_year</span>
</span><span class='line'>        <span class="mi">5</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (holiday.rb)</span> <a href='/downloads/code/modules-mixins-poodr/holiday.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Holiday</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cause</span>
</span><span class='line'>        <span class="k">case</span> <span class="nb">name</span>
</span><span class='line'>        <span class="k">when</span> <span class="s2">&quot;Memorial Day&quot;</span>
</span><span class='line'>            <span class="s2">&quot;remembering the men and women who died while serving in the country&#39;s armed forces&quot;</span>
</span><span class='line'>        <span class="k">when</span> <span class="s2">&quot;Thanksgiving&quot;</span>
</span><span class='line'>            <span class="s2">&quot;giving thanks for the blessing of the harvest and of the preceding year&quot;</span>
</span><span class='line'>        <span class="c1"># ...</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (memorial_day.rb)</span> <a href='/downloads/code/modules-mixins-poodr/memorial_day.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MemorialDay</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">May</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Holiday</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>        <span class="s2">&quot;Memorial Day&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Memorial Day always occurs on the last Monday in May</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">day_of</span>
</span><span class='line'>      <span class="n">mondays</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">date</span>
</span><span class='line'>        <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">month_of_year</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">day_of</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="/images/poodr/memorial_day_irb.png"></p>

<p>Happy Memorial Day!</p>
]]></content>
  </entry>
  
</feed>
