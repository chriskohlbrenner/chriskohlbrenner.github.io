<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cucumber | CEK.io]]></title>
  <link href="http://cek.io/blog/categories/cucumber/atom.xml" rel="self"/>
  <link href="http://cek.io/"/>
  <updated>2017-08-17T18:15:21-04:00</updated>
  <id>http://cek.io/</id>
  <author>
    <name><![CDATA[Chris Eaves-Kohlbrenner]]></name>
    <email><![CDATA[c.kohlbrenner@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing, Low- to High-Level]]></title>
    <link href="http://cek.io/blog/2014/06/24/low-to-high-testing/"/>
    <updated>2014-06-24T14:32:42-04:00</updated>
    <id>http://cek.io/blog/2014/06/24/low-to-high-testing</id>
    <content type="html"><![CDATA[<p>Google &ldquo;low level&rdquo; and you&rsquo;ll see the following definition.</p>

<p>{% img right /images/low-to-high-testing/low-level.png 400 %}</p>

<p>We often hear about low-level languages like Assembly or C (which was once a high-level language) vs. high-level languages like Java or Ruby (which may come to be considered low-level?).</p>

<p>Applying that same logic to testing, this blog post covers the various types of tests for Rails applications, working its way up from low-level unit tests up to high-level acceptance tests, with functional and integration tests in between. Along the way, I&rsquo;ll reference examples of tests I wrote for a side project: my <a href="http://world-cup-14.herokuapp.com/">World Cup tracker</a>.</p>

<!--more-->




<h3>Unit Tests (Model Tests)</h3>


<p>The <a href="http://guides.rubyonrails.org/testing.html">Rails Guide on testing</a> describes unit tests as &ldquo;what you write to test your models.&rdquo; It continues, &ldquo;It&rsquo;s a good practice to have at least one test for each of your validations and at least one test for every method in your model.&rdquo;</p>

<p>I won&rsquo;t get into FactoryGirl in detail, but here I create a factory for the Team model, which I use instead of fixtures as test data for team_spec.rb.</p>

<p>{% include_code low-to-high-testing/teams_factory.rb %}
{% include_code low-to-high-testing/team_spec.rb %}</p>

<h3>Functional Tests (Controller Tests)</h3>


<p>The testing RailsGuide explains, &ldquo;In Rails, testing the various actions of a single controller is called writing functional tests for that controller. Controllers handle the incoming web requests to your application and eventually respond with a rendered view.&rdquo; RSpec&rsquo;s documentation explains &ldquo;A controller spec is an RSpec wrapper for a Rails functional test.&rdquo; So functional tests and controller tests are synonymous.</p>

<p>The main purpose of functional tests, as the quote above makes clear, is to ensure that individual controllers handle requests appropriately and render the proper view. This can mean testing <a href="http://guides.rubyonrails.org/testing.html#what-to-include-in-your-functional-tests">the following</a>:</p>

<ul>
<li>Was the web request successful?</li>
<li>Was the user redirected to the right page?</li>
<li>Was the user successfully authenticated?</li>
<li>Was the correct object stored in the response template?</li>
<li>Was the appropriate message displayed to the user in the view?</li>
</ul>


<p>In the following example, I simply test that TeamsController assigns the correct resources (teams) and renders the correct views on get requests.
{% include_code low-to-high-testing/teams_controller_spec.rb %}</p>

<h3>Integration Tests (Acceptance Tests)</h3>


<p>Depending who you ask, integration tests and acceptance tests are either identical or subtly different. They both test functionality from end-to-end (or close to it) and are both forms of black box testing, but acceptance tests have a customer orientation, whereas integration tests are written by developers for developers. The first five slides of <a href="http://www.slideshare.net/AlanHecht/integration-and-acceptance-testing">this talk</a> provide a helpful summary.</p>

<p>The testing RailsGuide defines integration tests as intended to test &ldquo;the interaction among any number of controllers. They are generally used to test important work flows within your application.&rdquo; The &ldquo;important work flows&rdquo; are the key; integration tests should test the application from end-to-end&mdash;across multiple models, controllers, and views&mdash;to ensure that the application works &ldquo;in integration&rdquo;.</p>

<p>ExtremeProgramming.org defines acceptance tests as follows: &ldquo;Acceptance tests are created from user stories. During an iteration the user stories selected during the iteration planning meeting will be translated into acceptance tests. &hellip; Acceptance tests are black box system tests. Each acceptance test represents some expected result from the system.&rdquo; Another key: black box testing, testing an for the proper output given a certain input, without knowing what happens inside the &ldquo;black box&rdquo; (that&rsquo;s what unit and functional tests are for).</p>

<p>{% include_code low-to-high-testing/team_index_spec.rb %}</p>

<h3>Conclusion</h3>


<p>CodeClimate describes what they call <a href="http://blog.codeclimate.com/blog/2013/10/09/rails-testing-pyramid/">the Rails Testing Pyramid</a>, depicted below:</p>

<p>{% img left <a href="http://blog.codeclimate.com/images/posts/rails-testing-pyramid.png">http://blog.codeclimate.com/images/posts/rails-testing-pyramid.png</a> 400 %}</p>

<p>They write, &ldquo;Blending unit tests, service-level tests and acceptance tests yields faster test suites that still provide confidence the application is working, and are resistant to incidental breakage. As you develop, take care to prune tests that are not pulling their weight. When you fix a bug, implement your regression test at the lowest possible level. Over time, keep an eye on the ratio between the counts of each type of test, as well as the time of your acceptance test suite.&rdquo;</p>

<p>In the case of the Team resource in my World Cup app, my ratio was 1 integration test:3 functional tests:5 unit tests&mdash;a perfectly pyramidal ratio if you ask me! Of course, this is a simple example, but it illustrates the goal for a test suite more generally.</p>

<h3>Resources</h3>


<ul>
<li><a href="http://betterspecs.org/">BetterSpecs</a></li>
<li><a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a></li>
<li><a href="http://guides.rubyonrails.org/testing.html">RailsGuides: A Guide to Testing Rails Applications</a></li>
<li>&ldquo;How I learned to test my Rails applications&rdquo; (Part <a href="http://everydayrails.com/2012/03/12/testing-series-intro.html">1</a> | <a href="http://everydayrails.com/2012/03/12/testing-series-rspec-setup.html">2</a> | <a href="http://everydayrails.com/2012/03/19/testing-series-rspec-models-factory-girl.html">3</a> | <a href="http://everydayrails.com/2012/04/07/testing-series-rspec-controllers.html">4</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber: The Basics]]></title>
    <link href="http://cek.io/blog/2014/05/19/cucumber/"/>
    <updated>2014-05-19T12:47:20-04:00</updated>
    <id>http://cek.io/blog/2014/05/19/cucumber</id>
    <content type="html"><![CDATA[<p><a href="http://railscasts.com/episodes/155-beginning-with-cucumber"></a></p>

<p><a href="http://railscasts.com/episodes/159-more-on-cucumber"></a></p>

<p>Cucumber is useful, right? It provides <a href="http://cukes.info/">&ldquo;behavior driven development with elegance and joy&rdquo;</a>.</p>

<p>But <a href="http://www.jackkinsella.ie/2011/09/26/why-bother-with-cucumber-testing.html">some</a> call Cucumber &ldquo;no more than a clumsy wrapper over basic integration tests&rdquo;, insisting that &ldquo;Cucumber’s syntax is costly&rdquo; and recommending that programmers &ldquo;swap Cucumber for pure integration tests using Capybara&rdquo;. <a href="http://pivotallabs.com/cucumber-when-to-use-it-when-to-lose-it/">Others</a> agree, but argue that the benefit of Cucumber is for the product manager, not the programmer.</p>

<p>Ryan Bates, for one, likes Cucumber (or did as of 2009, when he published this RailsCast&hellip;):
{% blockquote RailsCasts <a href="http://railscasts.com/episodes/155-beginning-with-cucumber">http://railscasts.com/episodes/155-beginning-with-cucumber</a> #155 Beginning with Cucumber %}
It might seem like quite a lot of work to define the tests in English and implement each step one at a time, but Cucumber testing has several advantages. With it you’re testing your whole stack, so you’re writing tests that cover everything from the user interface down to the database. While they’re not a replacement for unit tests, they provide an excellent way of writing high-level tests to test the overall behaviour of your application.
{% endblockquote %}</p>

<p>I side with the nuanced view: Cucumber tests seem like a lot of extra work for an integration test that can be implemented using Capybara. That said, there&rsquo;s enough of a pro-Cucumber audience espousing the advantages&mdash;BDD, outside-in development<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, user stories, readability&mdash;that it&rsquo;s worth being familiar.</p>

<!--more-->




<h3>How does it work?</h3>


<p>Cucumber<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> boils down to:</p>

<ol>
  <li>
    Cucumber definition(s) (a <code>.feature</code> file): this file defines both:<ul>
      <li>the feature itself (syntax of “In order”, “As a” and “I Want”)
      <li>one or more scenarios ("Given", "When", and "Then").</li>
    </ul>
    <strong>Note</strong>: the Cucumber definition is enough to run <code>cucumber</code> from the command line, though it will return a message describing skipped and undefined steps.
  </li>
  {% codeblock %}
  Feature: Manage Articles
    In order to make a blog
    As an author
    I want to create and manage articles
    
    Scenario: Articles List
      Given I have articles titled Caching, Cucumber, Redis
      When I go to the list of articles
      Then I should see "Caching"
      And I should see "Cucumber"
      And I should see "Redis"
  {% endcodeblock %}

  <li>Step definition(s): these connect to the aforementioned cucumber steps, using Ruby code inside the blocks following each of the "Given", "When", and "Then" regexes.</li>
{% include_code cucumber/step_definitions/view_articles_steps.rb %}
</ol>


<p>It&rsquo;s really that simple. And it does require extra effort&mdash;even the copying of the Cucumber definition into the step definition regex feels wrong&mdash;but the process is easy enough.</p>

<p>What it comes down to is a different syntax for a behavior-driven process or integration test. Cucumber is one more way to implement it (in addition to Capybara, etc.). Where Cucumber really has its value is in its different syntax, which is more human-readable, meaning a non-technical person can write the Cucumber definitions (which are then implemented as step definitions).</p>

<p>So there may be limited value for a promgrammer on his or her own, but Cucumber can be valuable for a company or team as a whole.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Avdi Grimm walks through outside-in testing nicely (albeit with more programming complexity/sophistication than Cucumber) in <a href="http://www.rubytapas.com/episodes/120-Outside-In">this video</a>, in which he references the Cucumber &ldquo;given/when/then&rdquo; syntax.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>For a full outline of configuring a Cucumber environment, Daniel Chang outlines the setup <a href="https://github.com/danielchangNYC/YATL/blob/master/testing_setup.md">here</a>.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
