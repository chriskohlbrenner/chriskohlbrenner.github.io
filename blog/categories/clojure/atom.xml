<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | CEK.io]]></title>
  <link href="http://cek.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://cek.io/"/>
  <updated>2019-06-27T11:21:29+01:00</updated>
  <id>http://cek.io/</id>
  <author>
    <name><![CDATA[Chris Eaves-Kohlbrenner]]></name>
    <email><![CDATA[c.kohlbrenner@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A (Scheme) Calculator in Clojure]]></title>
    <link href="http://cek.io/blog/2019/06/27/scheme-clojure-calculator/"/>
    <updated>2019-06-27T11:30:00+01:00</updated>
    <id>http://cek.io/blog/2019/06/27/scheme-clojure-calculator</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working through <a href="https://mitpress.mit.edu/sites/default/files/sicp/index.html">Structure and Interpretation of Computer Programs (SICP)</a> and watching the <a href="https://archive.org/details/ucberkeley-webcast-PL3E89002AA9B9879E?sort=titleSorter">UC Berkeley CS61A lectures from Brian Harvey</a>. It&rsquo;s great content, so I can understand why he refers to SICP as &ldquo;the best computer science book in the world&rdquo;.</p>

<p>The <a href="https://archive.org/details/ucberkeley_webcast_nzMPF59Ackg">most recent lecture</a> presented a calculator implementation (for a calculator with four functions) in Scheme. This calculator is a simple REPL interpreter: it reads a user input, evaluates it, prints the output, and loops back again.</p>

<p>What follows is a summary of the lecture with my takeaways, including a description of the program (and why it&rsquo;s worth considering), the original Scheme program from the lecture, and my translation of it into Clojure.</p>

<h3>Why look at this example?</h3>


<p>There are two main reasons to look at this:</p>

<ol>
<li> It is an example of processing deep lists (lists of lists of lists)</li>
<li> This is a step towards understanding an actual Scheme interpreter written in Scheme. Unlike an actual Scheme interpreter, this has no variables and no procedures as first-class things. It only has four procedures: <code>+</code>, <code>/</code>, <code>-</code>, and <code>*</code>. But it&rsquo;s Scheme-like in its notation (<code>(+ 6 7)</code>) and does composition of functions as Scheme does.</li>
</ol>


<h3>The 4-function calculator code</h3>


<p>Original Scheme code:</p>

<p>``` scheme
(define (calc)
  (display &ldquo;calc: &rdquo;)
  (flush)
  (print (calc-eval (read)))
  (calc))</p>

<p>(define (calc-eval exp)
  (cond ((number? exp) exp)</p>

<pre><code>    ((list? exp) (calc-apply (car exp) (map calc-eval (cdr exp))))
    (else (error "Calc: bad expression:" exp))))
</code></pre>

<p>(define (calc-apply fn args)
  (cond ((eq? fn &lsquo;+) (accumulate + 0 args))</p>

<pre><code>    ((eq? fn '-) (cond ((null? args) (error "Calc: no args to -"))
                       ((= (length args) 1) (- (car args)))
                       (else (- (car args) (accumulate + 0 (cdr args))))))
    ((eq? fn '*) (accumulate * 1 args))
    ((eq? fn '/) (cond ((null? args) (error "Calc: no args to /"))
                       ((= (length args) 1) (/ (car args)))
                       (else (/ (car args) (accumulate * 1 (cdr args))))))
    (else (error "Calc: bad operator:" fn))))
</code></pre>

<p>```</p>

<p>And my translation into Clojure:</p>

<p>``` clojure
(defn calc-apply [fn args]
  (cond</p>

<pre><code>(= fn '+) (reduce + 0 args)
(= fn '-) (cond
            (nil? args) (throw (Exception. "Calc: no args to -"))
            (= (count args) 1) (- (first args))
            :else (- (first args) (reduce + 0 (rest args))))
(= fn '*) (reduce * 1 args)
(= fn '/) (cond
            (nil? args) (throw (Exception. "Calc: no args to /"))
            (= (count args) 1) (/ (first args))
            :else (/ (first args) (reduce + 0 (rest args))))
:else (throw (Exception. (str "Calc: bad operator:" fn)))))
</code></pre>

<p>(defn calc-eval [exp]
  (cond</p>

<pre><code>(number? exp) exp
(list? exp) (calc-apply (first exp)
                        (map calc-eval (rest exp)))
:else (throw (Exception. (str "Calc: bad expression:" exp)))))
</code></pre>

<p>(defn calc []
  (println &ldquo;calc: &rdquo;)
  (println (calc-eval (read)))
  (calc))
```</p>

<h3>Dealing with Deep Lists</h3>


<p>The key to handling deep lists can be seen in <code>(map calc-eval (cdr exp))</code>. It is sort of a recursive call, but not a exactly a recursive call, because there&rsquo;s no open parenthesis in front of <code>calc-eval</code>. Instead, <code>calc-eval</code> is an argument to <code>map</code>; <code>map</code> will typically call <code>calc-eval</code> more than once (for each sub-expression). So it&rsquo;s not just a simple recursive call, but a multi-way recursive call, which is the secret of dealing with deep lists.</p>

<p>For deep lists, we make a recursive call for each element of the top level list, and then for each element of sub-lists, and so on all the way down. The base case is an empty list (or when the expression isn&rsquo;t a list).</p>

<h3>Interpreters and Types of Expressions</h3>


<p>There are three pieces to an interpreter (and this goes for any interpreter, not just Scheme or Clojure):</p>

<ol>
<li>The read-eval-print loop (REPL). It&rsquo;s a loop because the last thing in it is a call to itself, so it runs forever. In the example, <code>read</code> turns things in parentheses into pairs. <code>calc-eval</code> takes an expression as its argument and returns (and prints) the value of that expression.</li>
<li><code>(eval exp)</code> returns the value of the expression</li>
<li><code>(apply function arglist)</code> returns the value returned by the function. This is where the example is different from a full interpreter: the actual Scheme interpreter handles first-class procedures, whereas this calculator example depends on the <em>name</em> of the function (must be one of <code>+</code>, <code>/</code>, <code>-</code>, and <code>*</code>.</li>
</ol>


<p>In Scheme, there are basically four types of expressions:</p>

<ul>
<li><strong>Self-evaluating expressions</strong> (primitives) like numbers or booleans &mdash; these are used in the calculator</li>
<li><strong>Variables</strong> &mdash; these are <strong>not</strong> supported in the calculator</li>
<li><strong>Function calls</strong> &mdash; these are used in the calculator</li>
<li><strong>Special forms</strong> &mdash; these are <strong>not</strong> supported in the calculator. A full interpreter would include special forms, but this introduces a lot of complexity which is ignored in the calculator example.</li>
</ul>


<p>In an interpreter, an evaluator&rsquo;s job is to take the stuff that is typed in and figure out what it means. This requires figuring out what the notation means. Scheme and Clojure (or any Lisp) make this easier, because a complete expression is one list; the language was designed in order to be able to evaluate its own programs. Compare this to Java, for example, where there are many different notations that are not uniform, so what you can put in one context is different than another context.</p>

<p>Lispians say &ldquo;at the heart of every programming language there&rsquo;s a lisp interpreter trying to get out&rdquo;, because you have to evaluate expressions that are procedure calls. Syntax doesn&rsquo;t get in the way.</p>

<p>A few differences between a full interpreter and this example can be seen in the following:</p>

<ul>
<li><strong><code>calc-eval</code></strong>: we will not see a recursive call for <code>(car exp)</code> in <code>calc-eval</code>; <code>(car exp)</code> has to be one of the 4 math symbols, but in a real Scheme interpreter it could be a symbol that&rsquo;s the name of a procedure, or it could be a lambda or procedure call or any number of other things to provide the function (so it would need to be evaluated).</li>
<li><strong><code>calc-apply</code></strong>: this function takes <code>fn</code> and <code>args</code> as its arguments, where <code>args</code> is always a list. This is not just a simplification, but an actual difference from a full interpreter: we don&rsquo;t have procedures as first-class values, so fn argument is a <em>symbol</em>, not the procedure itself. This means that the calculator cannot handle all procedures (like <code>sqrt</code>, etc.)</li>
</ul>


<p>There are a number of properties of a programming language that determine what it is to be a program in that language. For example, Scheme has first-class procedures, applicative order, variables. All of these properties manifest themselves in the interpreter; we can look at the interpreter and ask &ldquo;how would I change this interpreter if I wanted Scheme, but with normal order instead of applicative order?&rdquo; In that case, don&rsquo;t call <code>(map calc-eval (cdr exp))</code>, but just use <code>(cdr exp)</code>. Then we&rsquo;d be giving apply actual argument expressions rather than argument values.</p>

<h3>Syntax and Semantics</h3>


<p><em>Syntax</em> is the technical term for the form of a program, what the program looks like. The Scheme function syntax is <code>(procedure arg arg arg)</code>. <em>Semantics</em> is what that thing means. For example, <code>(procedure arg arg arg)</code> means &ldquo;call that procedure with these argument values after you&rsquo;ve recursively evaluated the argument expressions&rdquo;. There are differences across languages, but we see more or less the same kinds of things in the semantics&mdash;conditionals, loops, call functions, define variables&mdash;while syntax can be very different across languages.</p>

<p>An important point about the calculator: we are actually dealing with two different programming languages. <em>The calculator is a program written in Scheme, but the language that the calculator implements is a programming language that isn&rsquo;t Scheme</em>. For example, there are no variables in this calculator programming language. When Scheme interpreters are written in Scheme, there are also two languages involved (and it&rsquo;s more difficult to see the differences than Scheme vs. calculator language).</p>

<p>Notice that <code>eval</code> lives in both the syntax and semantics worlds. When it takes an expression (syntax) and returns a value, it turns syntax into semantics by turning the form into something meaningful. Meanwhile <code>apply</code> doesn&rsquo;t know anything about syntax. It takes a procedure and argument values, so it&rsquo;s entirely about semantics.</p>

<h3>An Aside on Functional Programming</h3>


<p>The <code>read</code> and <code>print</code> functions are primitive procedures that are <em>not</em> functional. <code>read</code> is not functional because, every time you call it with the same arguments, you get a different answer. <code>print</code> is not functional because it changes the state of the world. Functions just compute and return values. Even though Scheme is a functional programming language, the Scheme interpreter itself is not an entirely functional program. Most of it (<code>eval</code> and <code>apply</code>) is functional, since it just takes arguments and returns values.</p>

<h3>Some Clojure/Scheme Observations</h3>


<p>Clearly Scheme and Clojure are both Lisps. It&rsquo;s nice to see that the Clojure implementation is as consise as Scheme (it&rsquo;s four more lines, but that could be eliminated if we didn&rsquo;t put the four <code>cond</code>s on their own line). There are a few syntax differences (Clojure <code>reduce</code> instead of Scheme <code>accumulate</code>, <code>read-line</code> instead of <code>read</code>), but the semantics are identical.</p>

<p>One final syntax difference: In Scheme (and Common Lisp and most other Lisp dialects), <code>cons</code> is a primitive data structure made up of a pair. In Clojure, this is not the case. We can see the <code>cons</code> in the Scheme example when we use <code>car</code> (to access the first element) and <code>cdr</code> (to access the rest). Clojure <em>does</em> have a <code>cons</code> function, but it works differently:</p>

<p>``` clojure
(cons 1 2) ; IllegalArgumentException Don&rsquo;t know how to create ISeq from: java.lang.Long</p>

<p>(cons 1 &lsquo;(2 3 4)) ; (1 2 3 4)</p>

<p>; this is not a list, but a Cons
(list? (cons 1 &lsquo;(2 3 4))) ; false
(type (cons 1 &rsquo;(2 3 4))) ; clojure.lang.Cons
```</p>

<p>This is really a subject for <a href="https://stackoverflow.com/questions/34347985/clojure-no-cons-cells">further</a> <a href="https://stackoverflow.com/questions/5741111/help-explaining-how-cons-in-scheme-work">reading</a>, but suffice it to say that Clojure is a Lisp with some <a href="https://clojure.org/reference/lisps">differences from other Lisps</a>, including the fact that &ldquo;<code>cons</code>, <code>first</code> and <code>rest</code> manipulate sequence abstractions, not concrete cons cells&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Clojure Introduction to Binary and Bitwise Operators]]></title>
    <link href="http://cek.io/blog/2017/08/17/clojure-introduction-binary-bitwise/"/>
    <updated>2017-08-17T23:00:00+01:00</updated>
    <id>http://cek.io/blog/2017/08/17/clojure-introduction-binary-bitwise</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working in Clojure and ClojureScript lately. A few months back, I came across <a href="http://realworldclojure.com/one-weird-trick/">this one weird trick to master Clojure</a>. <em>TL;DR</em>: it recommends reading the API docs, fully, top to bottom.</p>

<p><blockquote><p>I’m not even joking! Go to this URL <a href="http://clojure.github.io/clojure/clojure.core-api.html">http://clojure.github.io/clojure/clojure.core-api.html</a> and start reading from top to bottom. If you did not read through that page, you may not know about amap. If you stopped reading before you get to ‘f’ you wouldn’t know about frequencies. However, if you read all the way through, you will be rewarded with knowledge about vary-meta.</p><footer><strong>&ldquo;One Weird Trick To Become a Clojure Expert&rdquo; <a href="http://realworldclojure.com/one-weird-trick/">http://realworldclojure.com/one-weird-trick/</a></strong></footer></blockquote></p>

<p>In the process of doing this, I was struck by all the <code>bit-</code> functions &mdash; of the ~600 vars and functions in <code>clojure.core</code>, there are 12 specifically for bitwise operations.</p>

<h3>Binary Fundamentals</h3>


<p>A quick overview on binary:</p>

<p>``` clojure
;; base-10 (decimal) to base-2 (binary). from right-to-left, binary columns are 1, 2, 4, 8, 16, &hellip; (derived from 2<sup>0</sup>, 2<sup>1</sup>, 2<sup>2</sup>, 2<sup>3</sup>, 2<sup>4</sup>, &hellip;).
;;
;; base-10        base-2                              math spelled out
;;    0                0            0   =  (0 * 1)
;;    1                1            1   =  (1 * 1)
;;    2               10            2   =  (1 * 2) + (0 * 1)
;;    3               11            3   =  (1 * 2) + (1 * 1)
;;    4              100            4   =  (1 * 4) + (0 * 2) + (0 * 1)
;;    5              101            5   =  (1 * 4) + (0 * 2) + (1 * 1)
;;    6              110            6   =  (1 * 4) + (1 * 2) + (0 * 1)
;;    7              111            7   =  (1 * 4) + (1 * 2) + (1 * 1)
;;    8             1000            8   =  (1 * 8) + (0 * 4) + (0 * 2) + (0 * 1)
;;    9             1001            9   =  (1 * 8) + (0 * 4) + (0 * 2) + (1 * 1)
;;   10             1010            10  =  (1 * 8) + (0 * 4) + (1 * 2) + (0 * 1)
;;   11             1011            11  =  (1 * 8) + (0 * 4) + (1 * 2) + (1 * 1)
;;   12             1100            12  =  (1 * 8) + (1 * 4) + (0 * 2) + (0 * 1)
;;   13             1101            13  =  (1 * 8) + (1 * 4) + (0 * 2) + (1 * 1)
;;   14             1110            14  =  (1 * 8) + (1 * 4) + (1 * 2) + (0 * 1)
;;   15             1111            15  =  (1 * 8) + (1 * 4) + (1 * 2) + (1 * 1)
;;   16            10000            16  = (1 * 16) + (0 * 8) + (0 * 4) + (0 * 2) + (0 * 1)</p>

<p>;; test in a repl
;; use <code>2r</code> to convert binary integer to decimal
;; use <code>java.lang.Integer/toBinaryString</code> to convert decimal integer to binary
$ lein repl</p>

<p>;; compare 11 (base-2) to 3 (base-10)
user=> 2r11
3
user=> (Integer/toBinaryString 3)
&ldquo;11&rdquo;</p>

<p>;; compare 1101 (base-2) to 13 (base-10)
user=> 2r1101
13
user=> (Integer/toBinaryString 13)
&ldquo;1101&rdquo;</p>

<p>;; side note: 2r means binary, can&rsquo;t take values besides 0 or 1
user=> 2r2
NumberFormatException For input string: &ldquo;2&rdquo;  java.lang.NumberFormatException.forInputString (NumberFormatException.java:65)
```</p>

<p>Some things to note:</p>

<ul>
<li>We can disregard leading zeros in binary, so binary <code>0010</code> and binary <code>10</code> both represent decimal <code>2</code>.</li>
<li>Each position is one bit (&ldquo;bit&rdquo; means &ldquo;<em>b</em>inary dig<em>it</em>&rdquo;). So <code>1111</code> is a 4-bit integer (so we can represent up to 15 different values). A 32-bit integer maxes at <code>11111111111111111111111111111111</code> (so we can represent up to 4,294,967,295 values). We&rsquo;ll see that we don&rsquo;t always use every position counting up from 0 (the left-most position will be used to determine positive/negative).</li>
<li>This blog post uses <code>2r....</code> and <code>Integer/toBinaryString</code> to convert between binary and decimal. Other functions and formatters are discussed <a href="https://stackoverflow.com/questions/21448788/printing-the-binary-value-of-a-number-in-clojure">here</a>.</li>
</ul>


<h3>Bitwise Operators</h3>


<p>This brings us to the bitwise operators. There are 12 in <code>clojure.core</code> (all visible in <a href="https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj">the source</a>):</p>

<p><code>bit-and</code> &ndash; Bitwise and</p>

<p><code>`` clojure
;;</code>bit-and` does a logical AND across columns
;; 1010     ; 10
;; 1001     ; 9
;; &mdash;&mdash;
;; 1000     ; 8   ; by column: 1 AND 1   =>   1
;;                             0 AND 0   =>   0
;;                             1 AND 0   =>   0
;;                             0 AND 1   =>   0</p>

<p>user=> (bit-and 10 9)
8
user=> (bit-and 2r1010 2r1001)
8
```</p>

<p><code>bit-or</code> &ndash; Bitwise or</p>

<p><code>`` clojure
;;</code>bit-or` does a logical OR across columns
;; 1010     ; 10
;; 1001     ; 9
;; &mdash;&mdash;
;; 1011     ; 11  ; by column: 1 OR 1   =>   1
;;                             0 OR 0   =>   0
;;                             1 OR 0   =>   1
;;                             0 OR 1   =>   1</p>

<p>user=> (bit-or 10 9)
11
user=> (bit-or 2r1010 2r1001)
11
```</p>

<p><code>bit-xor</code> &ndash; Bitwise exclusive or</p>

<p><code>`` clojure
;;</code>bit-xor` does an exclusive OR across columns (true when the two values are different)
;; 1010     ; 10
;; 1001     ; 9
;; &mdash;&mdash;
;; 0011     ; 11  ; by column: 1 XOR 1   =>   0
;;                             0 XOR 0   =>   0
;;                             1 XOR 0   =>   1
;;                             0 XOR 1   =>   1</p>

<p>user=> (bit-xor 10 9)
3
user=> (bit-xor 2r1010 2r1001)
3
```</p>

<p><code>bit-not</code> &ndash; Bitwise complement</p>

<p><code>`` clojure
;;</code>bit-not` does a complement, negating each position so each 0 becomes 1 and each 1 becomes 0
;; this reads 1010 as the 32-bit integer     00000000000000000000000000001010 (including leading 0s),
;; which, when negated/complemented, becomes 11111111111111111111111111110101 (represents decimal -11).</p>

<p>user=> (bit-not 2r1010)
-11
```</p>

<p><code>bit-and-not</code> &ndash; Bitwise and with complement</p>

<p><code>`` clojure
;;</code>bit-and-not` ANDs the first integer with the complement of the second
;; (bit-and-not 2r1010 2r1001)
;; (bit-and 2r1010 (bit-not 2r1001))
;; (bit-and 2r1010 2r0110)    =>    0010    => 2</p>

<p>user=> (bit-and-not 2r1010 2r1001)
2
user=> (bit-and 2r1010 (bit-not 2r1001))
2
```</p>

<p><code>bit-clear</code> &ndash; Clear bit at index n</p>

<p><code>`` clojure
;;</code>bit-clear` sets the bit to 0 at a given index (0-based, right to left)</p>

<p>user=> (bit-clear 2r1011 0)   ;; clears the 0th bit from right
10  ;; 2r1010
user=> (bit-clear 2r1011 1)   ;; clears the 1st bit from right
9   ;; 2r1001
user=> (bit-clear 2r1011 2)   ;; clears the 2nd bit from right
11  ;; 2r1011
user=> (bit-clear 2r1011 3)   ;; clears the 3rd bit from right
3   ;; 2r0011
```</p>

<p><code>bit-flip</code> &ndash; Flip bit at index n</p>

<p><code>`` clojure
;;</code>bit-flip` flips the bit (changes 0 to 1 or 1 to 0)at a given index</p>

<p>user=> (bit-flip 2r1010 0)   ;; flips the 0th bit from right
11  ;; 2r1011
user=> (bit-flip 2r1010 1)   ;; flips the 1st bit from right
8   ;; 2r1000
user=> (bit-flip 2r1010 2)   ;; flips the 2nd bit from right
14  ;; 2r1110
user=> (bit-flip 2r1010 3)   ;; flips the 3rd bit from right
2   ;; 2r0010
```</p>

<p><code>bit-set</code> &ndash; Set bit at index n</p>

<p><code>`` clojure
;;</code>bit-set` sets the bit to 1 at a given index</p>

<p>user=> (bit-set 2r1010 2)   ;; sets the 2nd bit from right to 1
14  ;; 2r1110
```</p>

<p><code>bit-test</code> &ndash; Test bit at index n</p>

<p><code>clojure
user=&gt; (bit-test 2r1010 0)   ;; checks if the 0th bit from right is 1
false
user=&gt; (bit-test 2r1010 1)   ;; checks if the 1st bit from right is 1
true
</code></p>

<p><code>bit-shift-left</code> &ndash; Bitwise shift left</p>

<p><code>`` clojure
;;</code>bit-shift-left` shifts the entire integer left, filling in empty spaces as 0</p>

<p>user=> (bit-shift-left 2r1010 1) ;; shifts the integer left 1 position (filling empty position with 0)
20  ; 2r10100
user=> (bit-shift-left 2r1011 3) ;; shifts the integer left 3 positions (filling empty positions with 0)
88 ; 2r1011000
```</p>

<p><code>bit-shift-right</code> &ndash; Bitwise shift right</p>

<p><code>`` clojure
;;</code>bit-shift-right` shifts the entire integer right, clearing positions &lt; 0</p>

<p>user=> (bit-shift-right 2r1010 1) ;; shifts the integer right 1 position
5  ; 2r101
user=> (bit-shift-right 2r1011 3) ;; shifts the integer right 3 positions
1 ; 2r1
```</p>

<p><code>unsigned-bit-shift-right</code> &ndash; Bitwise shift right, without sign-extension</p>

<p><code>`` clojure
;;</code>unsigned-bit-shift-right<code>does a</code>bit-shift-right` (so same behavior for small integers). its
;; difference is that all the other operations are for 32-bit signed integers, whereas this accepts
;; unsigned (no negative values, only positive) integers</p>

<p>user=> (unsigned-bit-shift-right 2r1010 1)
5
user=> (bit-shift-right 2r1010 1)
5
```</p>

<h3>Negative Binary (Signed and Unsigned Integers)</h3>




<h5>Sign-Magnitude Notation</h5>




<div style="float:right; display:flex; flex-direction:column; margin-left: 30px;">
  <img src="http://cek.io/images/bits/positive-signed-int.gif" />
  <img src="http://cek.io/images/bits/negative-signed-int.gif" />
  <span style="font-size:0.75em;">Source: <a href="http://www.electronics-tutorials.ws/binary/signed-binary-numbers.html">"Signed Binary Numbers"</a></span>
</div>


<p>Negative numbers can be represented using signed integers, where the left-most position represents whether the integer is positive or negative. In one implementation (sign-magnitude notation), the left-most bit is the sign, and the remaining bits are the value.</p>

<p>This means that in an <code>n</code>-bit integer (e.g., 4-bit), the left-most bit signifies positive/negative, so the remaining <code>n-1</code> (3) bits can hold the actual value. There are 16 possible values for a 4-bit integer (<code>0000</code> to <code>1111</code>), meaning that a signed 4-bit integer can go from -7 to +7 (it is 16 possible values because we can represent both <code>-0</code> and <code>+0</code>, as binary <code>1000</code> and <code>0000</code>).</p>

<h5>Two's Complement</h5>


<p>Two&rsquo;s Complement is a slightly more complicated scheme for signed integers (though not overly so), and the one more commonly used. A leading <code>1</code> still signifies a negative integer. The difference is that it&rsquo;s not simply sign (1st bit) and magnitude (remaining bits), because the magnitude is determined using the <em>complement</em> (hence the name).</p>

<p>Up until now, all the code samples have been <em>unsigned</em> integers, which is why all the values are positive (and all the examples with a leading 1 haven&rsquo;t been negative). Assuming 8-bit signed integers, we interpret things as follows:</p>

<p>``` clojure
00001010    ;;  10</p>

<p>;; to get -10, complement and add 1
11110101    ;; first complement
11110110    ;; then add 1</p>

<p>;; so 11110110 is the signed 8-bit representation of -10
```</p>

<h5>Idiosyncracies between signed and unsigned integers</h5>


<p>I alluded to this in the previous section: all the code samples have been <em>unsigned</em> integers. We&rsquo;ve been exploring conversions between decimal and binary using Clojure&rsquo;s radix-based entry format (e.g., <code>2r1010</code>), <a href="https://clojure.org/reference/reader#_literals">which uses Java Longs</a> and Java&rsquo;s <code>Integer/toBinaryString</code>, which returns strings.</p>

<p><code>clojure
user=&gt; (type 2r1010)
java.lang.Long
user=&gt; (type (Integer/toBinaryString 10))
java.lang.String
</code></p>

<p>This means there appear to be inconsistencies when dealing with signed integers:</p>

<p><code>clojure
user=&gt; (Integer/toBinaryString -1)
"11111111111111111111111111111111"
user=&gt; 2r11111111111111111111111111111111
4294967295  ;; might expect -1
</code></p>

<p>I say there <em>appear</em> to be inconsistencies, because this is the expected result of using Long. A full discussion gets into the intricacies of language design and primitives, as exemplified by threads like <a href="https://groups.google.com/forum/#!topic/clojure/7-hARL5c1lI">this</a> and <a href="https://groups.google.com/forum/#!topic/clojure/yMhQWVyRzBE%5B1-25%5D">this</a>.</p>

<p><h3>Resources</h5></p>

<ul>
<li><a href="http://upshots.org/actionscript/basics-of-binary-and-bitwise-operations">Non-Clojure overview of bitwise operations</a></li>
<li><a href="http://www.electronics-tutorials.ws/binary/signed-binary-numbers.html">Explanation of Signed Binary Integers</a></li>
<li><a href="https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html">Summary of Two&rsquo;s Complement</a></li>
<li><a href="http://blog.mishkovskyi.net/posts/2015/Oct/29/clojure-numbers-despair">One person&rsquo;s thoughts on Clojure numbers</a> (be sure to read Alex Miller&rsquo;s comment at the end)</li>
</ul>

]]></content>
  </entry>
  
</feed>
